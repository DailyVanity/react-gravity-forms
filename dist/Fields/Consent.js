"use strict";var _interopRequireDefault=require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _react=_interopRequireDefault(require("react")),_InputLabel=_interopRequireDefault(require("../FormElements/InputLabel")),_jsxRuntime=require("react/jsx-runtime"),_default=({field:a,value:b,validationMessage:c,touched:d,setTouched:e,hideField:f,updateForm:g,styledComponents:h,error:j,unsetError:k,...l})=>{const{id:m,formId:n,type:o,label:p,inputs:q,cssClass:r,isRequired:s,description:t,descriptionPlacement:u,labelPlacement:v,width:w,customName:x,checkboxLabel:y}=a,{Consent:z="div",Label:A="label",Box:B="div"}=h||!1;return(0,_jsxRuntime.jsx)(B,{width:w,className:c&&d||j?`form-field consent error ${r}`:`form-field consent ${r}`,style:{display:f?"none":void 0},children:(0,_jsxRuntime.jsxs)(z,{className:"checkboxes",children:[(0,_jsxRuntime.jsx)(_InputLabel.default,{formId:n,id:m,label:p,labelPlacement:v,isRequired:s,styledComponent:h}),"above"===u&&t&&(0,_jsxRuntime.jsx)("div",{className:"description",dangerouslySetInnerHTML:{__html:t}}),q.filter(a=>!a.isHidden).map((b,f)=>(0,_jsxRuntime.jsxs)(_react.default.Fragment,{children:[0===f&&(0,_jsxRuntime.jsxs)(_react.default.Fragment,{children:[(0,_jsxRuntime.jsx)("input",{id:`input_${n}_${m}_1`,type:"checkbox",name:x||`input_${b.id}`,value:1,required:s,onChange:b=>{g(b,a),e(m),k(m)},"aria-invalid":!!c&&d||!!j}),(0,_jsxRuntime.jsx)("label",{className:"gfield_consent_label",htmlFor:x||`input_${n}_${m}_1`,dangerouslySetInnerHTML:{__html:y}})]}),1===f&&(0,_jsxRuntime.jsx)("input",{type:"hidden",name:`input_${b.id}`,value:y,className:"gform_hidden"}),2===f&&(0,_jsxRuntime.jsx)("input",{type:"hidden",name:`input_${b.id}`,value:"1",className:"gform_hidden"})]},`input_${n}_${m}_${f}`)),"above"!==u&&t&&(0,_jsxRuntime.jsx)("div",{className:"description",dangerouslySetInnerHTML:{__html:t}}),(c&&d||j)&&(0,_jsxRuntime.jsx)("span",{className:"error-message",id:`error_${n}_${m}`,children:c||j})]})})};exports.default=_default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,