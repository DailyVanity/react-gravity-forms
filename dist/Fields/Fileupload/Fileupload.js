"use strict";var _interopRequireDefault=require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _defineProperty2=_interopRequireDefault(require("@babel/runtime/helpers/defineProperty")),_react=_interopRequireWildcard(require("react")),_reactDropzone=_interopRequireDefault(require("react-dropzone")),_GFDropzone=_interopRequireDefault(require("./GFDropzone")),_InputLabel=_interopRequireDefault(require("../../FormElements/InputLabel")),_jsxRuntime=require("react/jsx-runtime");function _getRequireWildcardCache(a){if("function"!=typeof WeakMap)return null;var b=new WeakMap,c=new WeakMap;return(_getRequireWildcardCache=function(a){return a?c:b})(a)}function _interopRequireWildcard(b,c){if(!c&&b&&b.__esModule)return b;if(null===b||"object"!=typeof b&&"function"!=typeof b)return{default:b};var d=_getRequireWildcardCache(c);if(d&&d.has(b))return d.get(b);var e={__proto__:null},f=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var a in b)if("default"!=a&&Object.prototype.hasOwnProperty.call(b,a)){var g=f?Object.getOwnPropertyDescriptor(b,a):null;g&&(g.get||g.set)?Object.defineProperty(e,a,g):e[a]=b[a]}return e.default=b,d&&d.set(b,e),e}class Fileupload extends _react.Component{constructor(...a){super(...a),(0,_defineProperty2.default)(this,"state",{imagePreviewUrl:this.props.field.preview||null,selectedFile:!!this.props.field.preview||null,uploadFileText:"No file chosen",previewID:this.props.value||null,errorText:this.props.error||!1}),(0,_defineProperty2.default)(this,"inputFile",_react.default.createRef()),(0,_defineProperty2.default)(this,"onChangeHandler",a=>{const{hasPreview:b,allowedExtensions:c}=this.props.field;if(this.setState({imagePreviewUrl:null,selectedFile:a.target.files[0],uploadFileText:a.target.files[0]?a.target.files[0].name:"No file chosen"}),b&&a.target&&a.target.files[0]){const b=a.target.files[0].name.split(".").pop().toLowerCase(),d=-1<c.indexOf(b);if(d){const b=new FileReader;b.onloadend=()=>{this.setState({imagePreviewUrl:b.result,previewID:!1})},b.readAsDataURL(a.target.files[0])}}}),(0,_defineProperty2.default)(this,"removeFilePreview",()=>{const{field:a,unsetError:b}=this.props;this.inputFile.current.value="",this.setState({imagePreviewUrl:null,selectedFile:null,previewID:!1}),b(a.id)}),(0,_defineProperty2.default)(this,"prepareAllowedTypes",a=>{let b=a.split(",");return b=b.map(a=>`.${a.replace(/\s/g,"")}`).join(", "),b}),(0,_defineProperty2.default)(this,"onButtonClickHandler",()=>{this.inputFile.current.click()}),(0,_defineProperty2.default)(this,"removeFile",(a,b)=>{a.preventDefault();const{updateForm:c}=this.props;c({target:{value:""}},b),this.inputFile.current.value="",this.setState({imagePreviewUrl:!1,selectedFile:!1,previewID:!1,uploadFileText:"No file chosen"})})}render(){const{selectedFile:a,uploadFileText:b,imagePreviewUrl:c,previewID:d}=this.state,{field:f,value:g,validationMessage:h,touched:i,setTouched:j,hideField:k,updateForm:l,formID:m,fieldError:n,styledComponents:o,error:p,unsetError:q,dropzoneText:r}=this.props,{id:s,type:e,label:t,cssClass:u,isRequired:v,description:w,descriptionPlacement:x,labelPlacement:y,width:z,allowedExtensions:A,buttonText:B,hasPreview:C,maxFileSize:D}=f,{Button:E="button",Label:F="label",FileWrapper:G="div",Box:H="div"}=o||!1,I=-1<u.indexOf("dropzone");return(0,_jsxRuntime.jsx)(H,{width:z,className:h&&i||p?`form-field error ${u}`:`form-field ${u}`,style:{display:k?"none":void 0},children:(0,_jsxRuntime.jsxs)(G,{className:e,children:[(0,_jsxRuntime.jsx)(_InputLabel.default,{formId:m,id:s,label:t,labelPlacement:y,isRequired:v,styledComponent:o}),"above"===x&&w&&w&&(0,_jsxRuntime.jsx)("div",{className:"description",dangerouslySetInnerHTML:{__html:w}}),I?(0,_jsxRuntime.jsx)(_GFDropzone.default,{dropzoneText:r,field:f,id:s,formID:m,isRequired:v,updateForm:l,setTouched:j,unsetError:q}):(0,_jsxRuntime.jsxs)(_jsxRuntime.Fragment,{children:[D&&(0,_jsxRuntime.jsx)("input",{type:"hidden",name:"MAX_FILE_SIZE",value:1048576*D}),(0,_jsxRuntime.jsx)("input",{id:`input_${m}_${s}`,name:`input_${s}`,type:"file",required:v,ref:this.inputFile,onChange:a=>{var b;this.onChangeHandler(a),l({target:{value:null===a||void 0===a||null===(b=a.target)||void 0===b||null===(b=b.files)||void 0===b||null===(b=b[0])||void 0===b?void 0:b.name}},f),j(s),q(s)},onBlur:a=>{var b;l({target:{value:null===a||void 0===a||null===(b=a.target)||void 0===b||null===(b=b.files)||void 0===b||null===(b=b[0])||void 0===b?void 0:b.name}},f),j(s)},accept:this.prepareAllowedTypes(A)||void 0,"aria-label":t,"aria-describedby":`error_${m}_${s}`,"aria-invalid":!!h||!!p,hidden:"hidden"}),d&&f.preview&&(0,_jsxRuntime.jsx)("input",{type:"hidden",name:"file-upload-preview",value:d}),C&&(0,_jsxRuntime.jsx)("div",{className:"file-preview",style:a&&c?{backgroundImage:`url(${c})`}:void 0,children:a&&c&&(0,_jsxRuntime.jsx)("button",{type:"button",className:"remove-file",onClick:()=>this.removeFilePreview()})}),(0,_jsxRuntime.jsxs)("div",{"aria-pressed":"false",tabIndex:"0",role:"button",className:"fileUpload",onClick:this.onButtonClickHandler,children:[(0,_jsxRuntime.jsx)(E,{color:"yellow",tabIndex:"-1",type:"button",children:B||"Choose a file"}),!a&&(0,_jsxRuntime.jsx)("span",{className:"no-file",children:b})]}),a&&(0,_jsxRuntime.jsxs)("div",{children:[(0,_jsxRuntime.jsx)("button",{type:"button",onClick:a=>this.removeFile(a,f),children:"remove file"}),(0,_jsxRuntime.jsx)("span",{children:b})]}),w&&"above"!==x&&(0,_jsxRuntime.jsx)("div",{className:"description",dangerouslySetInnerHTML:{__html:w}})]}),(h&&i||p)&&(0,_jsxRuntime.jsx)("span",{className:"error-message",id:`error_${s}`,children:h||p}),n&&(0,_jsxRuntime.jsx)("span",{className:"error-message",id:`error_${m}_${s}`,children:n})]})})}}var _default=exports.default=Fileupload;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,