"use strict";var _interopRequireDefault=require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _react=_interopRequireWildcard(require("react")),_reactSelect=_interopRequireDefault(require("react-select")),_InputLabel=_interopRequireDefault(require("../FormElements/InputLabel")),_jsxRuntime=require("react/jsx-runtime");function _getRequireWildcardCache(a){if("function"!=typeof WeakMap)return null;var b=new WeakMap,c=new WeakMap;return(_getRequireWildcardCache=function(a){return a?c:b})(a)}function _interopRequireWildcard(b,c){if(!c&&b&&b.__esModule)return b;if(null===b||"object"!=typeof b&&"function"!=typeof b)return{default:b};var d=_getRequireWildcardCache(c);if(d&&d.has(b))return d.get(b);var e={__proto__:null},f=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var a in b)if("default"!=a&&Object.prototype.hasOwnProperty.call(b,a)){var g=f?Object.getOwnPropertyDescriptor(b,a):null;g&&(g.get||g.set)?Object.defineProperty(e,a,g):e[a]=b[a]}return e.default=b,d&&d.set(b,e),e}var _default=({field:a,value:b,validationMessage:c,touched:d,setTouched:e,hideField:f,updateForm:g,styledComponents:h,error:i,unsetError:j,setFocusClass:k,cssClass:l,language:m,...n})=>{function o(){Promise.resolve().then(()=>_interopRequireWildcard(require("i18n-iso-countries"))).then(a=>{a.registerLocale(require(`i18n-iso-countries/langs/${m?m:"en"}.json`));const b=Object.values(a.getNames(m?m:"en",{select:"official"})).map(b=>b).sort((c,a)=>c.localeCompare(a));D(b)}).catch(a=>console.log(a))}const{id:p,formId:q,type:r,label:s,placeholder:t,isRequired:u,inputs:v,maxLength:w,description:x,descriptionPlacement:y,labelPlacement:z,width:A,customName:B}=a,[C,D]=(0,_react.useState)([]),{Input:F="input",Label:G="label",Box:H="div",ReactSelect:E}=h||!1,I=E||_reactSelect.default,J=b=>{const c=b&&b.target?b:{target:{value:b}};g(c,a)};return(0,_react.useEffect)(()=>{o()},[]),(0,_jsxRuntime.jsx)(H,{width:A,className:c&&d||i?`form-field error ${l}`:`form-field ${l}`,style:{display:f?"none":void 0},children:null===v||void 0===v?void 0:v.map((f,l)=>!f.isHidden&&(0,_jsxRuntime.jsxs)("div",{className:r,children:[(0,_jsxRuntime.jsx)(_InputLabel.default,{formId:q,id:f.id,label:f.label,labelPlacement:z,isRequired:u,styledComponent:h}),"above"===y&&x&&(0,_jsxRuntime.jsx)("div",{className:"description",dangerouslySetInnerHTML:{__html:x}}),5===l&&C?(0,_jsxRuntime.jsx)(I,{onChange:a=>{J(a),j(f.id)},onBlur:c=>{g(c,a),e(f.id),k(""!==b)},onFocus:()=>k(!0),options:C.map(a=>({label:a,value:a})),children:C.map(a=>(0,_jsxRuntime.jsx)("option",{value:a,children:a}))}):(0,_jsxRuntime.jsx)(F,{id:`input_${q}_${f.id}`,name:B||`input_${f.id}`,type:r,value:b?b[f.id]:"",placeholder:f.placeholder,maxLength:w,required:u,onChange:b=>{g(b,a,f.id),j(f.id)},onBlur:c=>{g(c,a),e(f.id),k(""!==b)},onFocus:()=>k(!0),"aria-label":f.label,"aria-describedby":`error_${q}_${f.id}`,"aria-invalid":!!c&&d||!!i},f.id),"above"!==y&&x&&(0,_jsxRuntime.jsx)("div",{className:"description",dangerouslySetInnerHTML:{__html:x}}),(c&&d||i)&&(0,_jsxRuntime.jsx)("span",{className:"error-message",id:`error_${q}_${p}`,children:c||i})]},f.id))})};exports.default=_default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,