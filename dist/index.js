"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),Object.defineProperty(exports,"RenderFields",{enumerable:!0,get:function get(){return _RenderFields["default"]}}),Object.defineProperty(exports,"FormError",{enumerable:!0,get:function get(){return _FormError["default"]}}),Object.defineProperty(exports,"FormConfirmation",{enumerable:!0,get:function get(){return _FormConfirmation["default"]}}),Object.defineProperty(exports,"validateField",{enumerable:!0,get:function get(){return _validation.validateField}}),Object.defineProperty(exports,"Submit",{enumerable:!0,get:function get(){return _Submit["default"]}}),exports["default"]=void 0;var _react=_interopRequireWildcard(require("react")),_isomorphicUnfetch=_interopRequireDefault(require("isomorphic-unfetch")),_RenderFields=_interopRequireDefault(require("./FormElements/RenderFields")),_FormError=_interopRequireDefault(require("./FormElements/FormError")),_FormConfirmation=_interopRequireDefault(require("./FormElements/FormConfirmation")),_validation=require("./Helpers/validation"),_Submit=_interopRequireDefault(require("./FormElements/Submit"));function _interopRequireDefault(a){return a&&a.__esModule?a:{default:a}}function _getRequireWildcardCache(){if("function"!=typeof WeakMap)return null;var a=new WeakMap;return _getRequireWildcardCache=function(){return a},a}function _interopRequireWildcard(a){if(a&&a.__esModule)return a;if(null===a||"object"!==_typeof(a)&&"function"!=typeof a)return{default:a};var b=_getRequireWildcardCache();if(b&&b.has(a))return b.get(a);var c={},d=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var e in a)if(Object.prototype.hasOwnProperty.call(a,e)){var f=d?Object.getOwnPropertyDescriptor(a,e):null;f&&(f.get||f.set)?Object.defineProperty(c,e,f):c[e]=a[e]}return c["default"]=a,b&&b.set(a,c),c}function _typeof(a){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(a){return typeof a}:function(a){return a&&"function"==typeof Symbol&&a.constructor===Symbol&&a!==Symbol.prototype?"symbol":typeof a},_typeof(a)}function asyncGeneratorStep(a,b,c,d,e,f,g){try{var h=a[f](g),i=h.value}catch(a){return void c(a)}h.done?b(i):Promise.resolve(i).then(d,e)}function _asyncToGenerator(a){return function(){var b=this,c=arguments;return new Promise(function(d,e){function f(a){asyncGeneratorStep(h,d,e,f,g,"next",a)}function g(a){asyncGeneratorStep(h,d,e,f,g,"throw",a)}var h=a.apply(b,c);f(void 0)})}}function _toConsumableArray(a){return _arrayWithoutHoles(a)||_iterableToArray(a)||_nonIterableSpread()}function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance")}function _iterableToArray(a){if(Symbol.iterator in Object(a)||"[object Arguments]"===Object.prototype.toString.call(a))return Array.from(a)}function _arrayWithoutHoles(a){if(Array.isArray(a)){for(var b=0,c=Array(a.length);b<a.length;b++)c[b]=a[b];return c}}function ownKeys(a,b){var c=Object.keys(a);if(Object.getOwnPropertySymbols){var d=Object.getOwnPropertySymbols(a);b&&(d=d.filter(function(b){return Object.getOwnPropertyDescriptor(a,b).enumerable})),c.push.apply(c,d)}return c}function _objectSpread(a){for(var b,c=1;c<arguments.length;c++)b=null==arguments[c]?{}:arguments[c],c%2?ownKeys(Object(b),!0).forEach(function(c){_defineProperty(a,c,b[c])}):Object.getOwnPropertyDescriptors?Object.defineProperties(a,Object.getOwnPropertyDescriptors(b)):ownKeys(Object(b)).forEach(function(c){Object.defineProperty(a,c,Object.getOwnPropertyDescriptor(b,c))});return a}function _classCallCheck(a,b){if(!(a instanceof b))throw new TypeError("Cannot call a class as a function")}function _defineProperties(a,b){for(var c,d=0;d<b.length;d++)c=b[d],c.enumerable=c.enumerable||!1,c.configurable=!0,"value"in c&&(c.writable=!0),Object.defineProperty(a,c.key,c)}function _createClass(a,b,c){return b&&_defineProperties(a.prototype,b),c&&_defineProperties(a,c),a}function _possibleConstructorReturn(a,b){return b&&("object"===_typeof(b)||"function"==typeof b)?b:_assertThisInitialized(a)}function _getPrototypeOf(a){return _getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function(a){return a.__proto__||Object.getPrototypeOf(a)},_getPrototypeOf(a)}function _assertThisInitialized(a){if(void 0===a)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return a}function _inherits(a,b){if("function"!=typeof b&&null!==b)throw new TypeError("Super expression must either be null or a function");a.prototype=Object.create(b&&b.prototype,{constructor:{value:a,writable:!0,configurable:!0}}),b&&_setPrototypeOf(a,b)}function _setPrototypeOf(a,b){return _setPrototypeOf=Object.setPrototypeOf||function(a,b){return a.__proto__=b,a},_setPrototypeOf(a,b)}function _defineProperty(a,b,c){return b in a?Object.defineProperty(a,b,{value:c,enumerable:!0,configurable:!0,writable:!0}):a[b]=c,a}var GravityForm=function(a){function b(a){var c;return _classCallCheck(this,b),c=_possibleConstructorReturn(this,_getPrototypeOf(b).call(this,a)),_defineProperty(_assertThisInitialized(c),"setTouched",function(a){c.setState({touched:_objectSpread({},c.state.touched,_defineProperty({},a,!0))})}),_defineProperty(_assertThisInitialized(c),"unsetError",function(a){var b=c.state.errorMessages;!b||b[a]&&(delete b[a],c.setState({errorMessages:b}))}),_defineProperty(_assertThisInitialized(c),"updateFormHandler",function(a,b){var d,e=c.state,f=e.formValues,g=e.conditioanlIds,h=e.conditionFields,j=b.id,k=b.type,l=b.isRequired;if("checkbox"===b.type){var m=_toConsumableArray(f[b.id].value),n=m.indexOf(a.target.value);-1<n?m.splice(n,1):m.push(a.target.value),d=m}else if("date"==b.type&&"datepicker"!==b.dateType){var o=b.subId,p=b.dateLabel,q=_toConsumableArray(f[b.id].value);q[o]={val:a.target.value,label:p},d=q}else if("consent"==b.type)d=a.target?a.target.checked:"null";else if("password"===b.type||"email"===b.type&&b.emailConfirmEnabled){var r=b.subId,s=f[b.id]&&f[b.id].value?_toConsumableArray(f[b.id].value):[];s[r]={val:a.target.value},d=s}else d=a.target?a.target.value:"null";"text"===k&&-1<b.cssClass.indexOf("iban")&&(k="iban");var t=(0,_validation.validateField)(d,b);if(-1!==g.indexOf(j)){f[j].value=d;for(var w=0;w<h.length;w++){var u=h[w].id,v=c.checkConditionalLogic(h[w].conditionalLogic,f);f[u].hideField=v,v&&(f[u].isRequired&&v&&(f[u].value=""),f[u].valid=!!f[u].isRequired)}}c.setState({formValues:_objectSpread({},f,_defineProperty({},j,{value:d,id:j,valid:t,label:b.label,pageNumber:b.pageNumber,cssClass:b.cssClass,isRequired:b.isRequired}))},function(){var a=c.props,e=a.onChange,f=a.onChangeField;e&&e(c.state.formValues),f&&f(_defineProperty({},j,{value:d,id:j,valid:t,label:b.label,pageNumber:b.pageNumber,cssClass:b.cssClass,isRequired:b.isRequired}))})}),_defineProperty(_assertThisInitialized(c),"scrollToConfirmation",function(){var a=!!c.wrapperRef&&c.wrapperRef.getBoundingClientRect();if(a&&window){var b=window.pageYOffset||document.documentElement.scrollTop;window.scrollTo({top:b+a.top-100})}}),_defineProperty(_assertThisInitialized(c),"onSubmit",function(){var a=_asyncToGenerator(regeneratorRuntime.mark(function a(b){var d,e,f,g,h,i,j,k;return regeneratorRuntime.wrap(function(a){for(;;)switch(a.prev=a.next){case 0:d=c.props.onSubmit,e=new FormData(b.target),b.preventDefault(),d?d(e):(c.setState({submitting:!0,submitSuccess:!1,submitFailed:!1,confirmationMessage:!1,errorMessages:!1}),f=c.props,g=f.formID,h=f.backendUrl,i=f.jumpToConfirmation,j=f.onSubmitSuccess,k=h.substring(0,h.indexOf("/wp-json")),(0,_isomorphicUnfetch["default"])("".concat(k,"/wp-json/gf/v2/forms/").concat(g,"/submissions"),{method:"POST",body:e}).then(function(a){return a.json()}).then(function(a){if(a&&a.is_valid){if(j){var g=j(a);if(!g)return!1}var b=a.confirmation_message,d=b||!1,e=d.type,f=d.link;if(e&&f&&"redirect"===e&&"undefined"!=typeof window)return window.location.replace(f),!1;c.setState({submitting:!1,submitSuccess:!0,confirmationMessage:a.confirmation_message}),i&&c.scrollToConfirmation()}else throw{response:a}})["catch"](function(a){var b=a&&a.response&&a.response.validation_messages?a.response.validation_messages:"Something went wrong";c.setState({submitting:!1,submitFailed:!0,errorMessages:b}),i&&c.scrollToConfirmation()}));case 4:case"end":return a.stop();}},a)}));return function(){return a.apply(this,arguments)}}()),_defineProperty(_assertThisInitialized(c),"nextStep",function(a){a&&a.preventDefault();var b=c.state.activePage,d=c.props.activePage;d&&d(b+1),c.setState({activePage:b+1},function(){return c.scrollToConfirmation()})}),_defineProperty(_assertThisInitialized(c),"prevStep",function(a){a&&a.preventDefault();var b=c.state.activePage,d=c.props.activePage;d&&d(b-1),c.setState({activePage:b-1},function(){return c.scrollToConfirmation()})}),_defineProperty(_assertThisInitialized(c),"checkConditionalLogic",function(a){var b=!!(1<arguments.length&&void 0!==arguments[1])&&arguments[1],d=a.rules,e=a.actionType;if(!d)return!0;for(var f=b||c.state.formValues,g="hide"!==e,h=[],j=0;j<d.length;j++){var k=d[j],l=k.fieldId,m=k.value,n=k.operator,o=f[l].value&&f[l].value.value?f[l].value.value:f[l].value||!1,p=Array.isArray(o)?o.join(""):o;h[j]=m?p&&m==p?"hide"===e:p&&p.includes(m)?"hide"===e:"hide"!==e:p||m?"hide"!==e:"hide"===e,"isnot"===n&&(h[j]=!h[j])}return g=h.every(function(a){return!0===a}),g}),c.state={submitFailed:!1,errorMessages:!1,formValues:{},loading:!0,submitting:!1,submitSuccess:!1,confirmationMessage:!1,isValid:!1,formData:{},touched:{},activePage:!1,conditionFields:{},conditioanlIds:{},isMultipart:!1},c}return _inherits(b,a),_createClass(b,[{key:"componentDidMount",value:function(){var a=_asyncToGenerator(regeneratorRuntime.mark(function a(){var b,c,d,e,f,g,h,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y=this;return regeneratorRuntime.wrap(function(a){for(;;)switch(a.prev=a.next){case 0:return b=this.props,c=b.formID,d=b.backendUrl,e=b.populatedFields,f=b.populatedEntry,g=b.fetchOptions,h=b.initialPage,j=b.getParams,this._isMounted=!0,k=!1,l=j?Object.keys(j).map(function(a){return a+"="+j[a]}).join("&"):"",m="".concat(d,"/").concat(c).concat(l?"?".concat(l):""),a.next=7,(0,_isomorphicUnfetch["default"])(m,g).then(function(a){return a.json()}).then(function(a){return a})["catch"](function(){return!1});case 7:if(n=a.sent,!(n&&this._isMounted)){a.next=34;break}for(o={},p=[],q=[],r=!0,s=!1,t=void 0,a.prev=15,u=function(){var a=w.value,b=void 0,c=!1,d=a.inputName&&e&&e[a.inputName];if(f&&f[a.id]?c=!0:f&&a.inputs&&a.inputs.some(function(a){f[a.id]&&(c=!0)}),"checkbox"===a.type)b=a.choices.filter(function(b){return d?b.value===e[a.inputName]:b.isSelected}).map(function(a){return a.value}),c&&(b=a.inputs.filter(function(a){return f[a.id]}).map(function(a){return a.label}));else if("radio"===a.type){if(d)b=e[a.inputName];else{var l=a.choices.find(function(a){return a.isSelected});b=l?l.value:""}}else if("select"===a.type){var m=a.choices.filter(function(b){return d?b.value===e[a.inputName]:b.isSelected}).map(function(a){return{value:a.value,label:a.text}});b=m&&0<m.length?m[0]:""}else b=d?e[a.inputName]:c?f[a.id]:a.defaultValue,"fileupload"===a.type&&(k=!0);if(a.conditionalLogic){for(var g,h={id:a.id,conditionalLogic:a.conditionalLogic},i=a.conditionalLogic.rules.map(function(a){return a.fieldId}),j=0;j<i.length;j++)g=parseInt(i[j]),-1===q.indexOf(g)&&q.push(g);p.push(h)}o[a.id]={valid:(0,_validation.validateField)(b,a),value:b,label:a.label,pageNumber:a.pageNumber,cssClass:a.cssClass,isRequired:a.isRequired}},v=n.fields[Symbol.iterator]();!(r=(w=v.next()).done);r=!0)u();a.next=24;break;case 20:a.prev=20,a.t0=a["catch"](15),s=!0,t=a.t0;case 24:a.prev=24,a.prev=25,r||null==v["return"]||v["return"]();case 27:if(a.prev=27,!s){a.next=30;break}throw t;case 30:return a.finish(27);case 31:return a.finish(24);case 32:for(x=0;x<p.length;x++)o[p[x].id].hideField=this.checkConditionalLogic(p[x].conditionalLogic,o);this.setState({formData:n,formValues:o,activePage:h?h:!!n.pagination&&1,conditionFields:p,conditioanlIds:q,isMultipart:k},function(){var a=y.props,b=a.nextStep,c=a.prevStep,d=a.activePage;b&&b(function(){return y.nextStep}),c&&c(function(){return y.prevStep}),d&&d(y.state.activePage)});case 34:case"end":return a.stop();}},a,this,[[15,20,24,32],[25,,27,31]])}));return function componentDidMount(){return a.apply(this,arguments)}}()},{key:"componentWillUnmount",value:function componentWillUnmount(){this._isMounted=!1}},{key:"render",value:function render(){var a=this,b=this.state,c=b.formData,d=b.formValues,e=b.submitFailed,f=b.submitSuccess,g=b.touched,h=b.submitting,i=b.activePage,j=b.isMultipart,k=this.props,l=k.title,m=k.submitIcon,n=k.saveStateToHtmlField,o=k.styledComponents,p=k.customComponents,q=k.errorMessage,r=k.dropzoneText,s=k.loadingSpinner,t=o||!1,u=t.Button,v=t.Loading,w=t.GFWrapper,x=void 0===w?"div":w,y=t.FormError,z=c.cssClass,A=Object.keys(d).some(function(a){return!d[a].hideField&&d[a].valid}),B=!!i&&Object.keys(d).some(function(a){return d[a].pageNumber===i&&!d[a].hideField&&d[a].valid});return _react["default"].createElement(x,{ref:function ref(b){return a.wrapperRef=b},className:"form-wrapper",css:{position:"relative"},id:"gravity_form_".concat(this.props.formID)},c.title?null:v&&_react["default"].createElement(v,{isLoading:!0}),e&&!f&&_react["default"].createElement(_FormError["default"],{SFormError:y||!1,errorMessage:q||"There was a problem with your submission"}),f&&this.state.confirmationMessage&&_react["default"].createElement(_FormConfirmation["default"],{confirmation:this.state.confirmationMessage}),!f&&c.fields?_react["default"].createElement("form",{onSubmit:function onSubmit(b){return a.onSubmit(b)},className:z,encType:j?"multipart/form-data":void 0,noValidate:!0},(c.title||c.description)&&_react["default"].createElement("div",null,c.title&&l?_react["default"].createElement("h3",{className:"form-title"},c.title):null,c.description?_react["default"].createElement("p",{className:"form-description"},c.description):null),_react["default"].createElement("div",{className:"form-wrapper"},_react["default"].createElement(_RenderFields["default"],{styledComponents:o,customComponents:p,fields:c.fields,formValues:d,submitFailed:e,submitSuccess:f,updateForm:this.updateFormHandler,touched:g,setTouched:this.setTouched,pagination:c.pagination,activePage:i,prevStep:this.prevStep,nextStep:this.nextStep,isNextDisabled:B,checkConditionalLogic:this.checkConditionalLogic,saveStateToHtmlField:n,enableHoneypot:c.enableHoneypot,errors:this.state.errorMessages,unsetError:this.unsetError,dropzoneText:r}),(!c.pagination||c.pagination&&c.pagination.pages.length===i)&&_react["default"].createElement(_Submit["default"],{Button:u,Loading:v,formData:c,submitIcon:m,isDisabled:A,submitting:h,prevStep:this.prevStep,loadingSpinner:s}))):"")}}]),b}(_react.Component);GravityForm.defaultProps={title:!0,submitIcon:!1,saveStateToHtmlField:!1,jumpToConfirmation:!0};var _default=GravityForm;exports["default"]=_default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6WyJHcmF2aXR5Rm9ybSIsInByb3BzIiwiaWQiLCJzZXRTdGF0ZSIsInRvdWNoZWQiLCJzdGF0ZSIsImVycm9yTWVzc2FnZXMiLCJldmVudCIsImZpZWxkIiwidmFsdWUiLCJmb3JtVmFsdWVzIiwiY29uZGl0aW9hbmxJZHMiLCJjb25kaXRpb25GaWVsZHMiLCJ0eXBlIiwiaXNSZXF1aXJlZCIsInZhbHVlcyIsImluZGV4IiwiaW5kZXhPZiIsInRhcmdldCIsInNwbGljZSIsInB1c2giLCJkYXRlVHlwZSIsInN1YklkIiwiZGF0ZUxhYmVsIiwidmFsIiwibGFiZWwiLCJjaGVja2VkIiwiZW1haWxDb25maXJtRW5hYmxlZCIsImNzc0NsYXNzIiwidmFsaWQiLCJpIiwibGVuZ3RoIiwiaGlkZSIsImNoZWNrQ29uZGl0aW9uYWxMb2dpYyIsImNvbmRpdGlvbmFsTG9naWMiLCJoaWRlRmllbGQiLCJwYWdlTnVtYmVyIiwib25DaGFuZ2UiLCJvbkNoYW5nZUZpZWxkIiwicmVjdCIsIndyYXBwZXJSZWYiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJ3aW5kb3ciLCJzY3JvbGxUb3AiLCJwYWdlWU9mZnNldCIsImRvY3VtZW50IiwiZG9jdW1lbnRFbGVtZW50Iiwic2Nyb2xsVG8iLCJ0b3AiLCJjdXN0b21PblN1Ym1pdCIsIm9uU3VibWl0IiwiZm9ybURhdGEiLCJGb3JtRGF0YSIsInByZXZlbnREZWZhdWx0Iiwic3VibWl0dGluZyIsInN1Ym1pdFN1Y2Nlc3MiLCJzdWJtaXRGYWlsZWQiLCJjb25maXJtYXRpb25NZXNzYWdlIiwiZm9ybUlEIiwiYmFja2VuZFVybCIsImp1bXBUb0NvbmZpcm1hdGlvbiIsIm9uU3VibWl0U3VjY2VzcyIsImdmU3VibWlzc2lvblVybCIsInN1YnN0cmluZyIsIm1ldGhvZCIsImJvZHkiLCJ0aGVuIiwicmVzcCIsImpzb24iLCJyZXNwb25zZSIsImlzX3ZhbGlkIiwicmVzIiwiY29uZmlybWF0aW9uX21lc3NhZ2UiLCJsaW5rIiwibG9jYXRpb24iLCJyZXBsYWNlIiwic2Nyb2xsVG9Db25maXJtYXRpb24iLCJlcnJvciIsInZhbGlkYXRpb25fbWVzc2FnZXMiLCJlIiwiYWN0aXZlUGFnZSIsInNldEFjdGl2ZSIsImNvbmRpdGlvbiIsImZpZWxkcyIsInJ1bGVzIiwiYWN0aW9uVHlwZSIsImhpZGVCYXNlZE9uUnVsZXMiLCJmaWVsZElkIiwib3BlcmF0b3IiLCJjb25kaXRpb25GaWVsZFZhbHVlIiwic3RyaW5nVmFsdWUiLCJBcnJheSIsImlzQXJyYXkiLCJqb2luIiwiaW5jbHVkZXMiLCJldmVyeSIsImxvYWRpbmciLCJpc1ZhbGlkIiwiaXNNdWx0aXBhcnQiLCJwb3B1bGF0ZWRGaWVsZHMiLCJwb3B1bGF0ZWRFbnRyeSIsImZldGNoT3B0aW9ucyIsImluaXRpYWxQYWdlIiwiZ2V0UGFyYW1zIiwiX2lzTW91bnRlZCIsInF1ZXJ5U3RyaW5nIiwiT2JqZWN0Iiwia2V5cyIsIm1hcCIsImtleSIsInJlcXVlc3RVcmwiLCJmb3JtIiwiaGFzUG9wdWxhdGVkRW50cnkiLCJoYXNQb3B1bGF0aW9uIiwiaW5wdXROYW1lIiwiaW5wdXRzIiwic29tZSIsImlucHV0IiwiY2hvaWNlcyIsImZpbHRlciIsImNob2ljZSIsImlzU2VsZWN0ZWQiLCJwcmVzZWxlY3RlZCIsImZpbmQiLCJzZWxlY3RlZE9wdGlvbiIsIml0ZW0iLCJ0ZXh0IiwiZGVmYXVsdFZhbHVlIiwidG1wRmllbGQiLCJpZHMiLCJwYXJzZUludCIsInBhZ2luYXRpb24iLCJuZXh0U3RlcCIsInByZXZTdGVwIiwidGl0bGUiLCJzdWJtaXRJY29uIiwic2F2ZVN0YXRlVG9IdG1sRmllbGQiLCJzdHlsZWRDb21wb25lbnRzIiwiY3VzdG9tQ29tcG9uZW50cyIsImVycm9yTWVzc2FnZSIsImRyb3B6b25lVGV4dCIsImxvYWRpbmdTcGlubmVyIiwiQnV0dG9uIiwiTG9hZGluZyIsIkdGV3JhcHBlciIsIlNGb3JtRXJyb3IiLCJGb3JtRXJyb3IiLCJpc0Rpc2FibGVkIiwieCIsImlzTmV4dERpc2FibGVkIiwiZWwiLCJwb3NpdGlvbiIsImRlc2NyaXB0aW9uIiwidXBkYXRlRm9ybUhhbmRsZXIiLCJzZXRUb3VjaGVkIiwiZW5hYmxlSG9uZXlwb3QiLCJ1bnNldEVycm9yIiwicGFnZXMiLCJDb21wb25lbnQiLCJkZWZhdWx0UHJvcHMiXSwibWFwcGluZ3MiOiJ1d0pBUU1BLENBQUFBLFcsYUFDSixXQUFZQyxDQUFaLENBQW1CLHFHQUNYQSxDQURXLDBEQXFMTixTQUFDQyxDQUFELENBQVEsQ0FDbkIsRUFBS0MsUUFBTCxDQUFjLENBQ1pDLE9BQU8sa0JBQU8sRUFBS0MsS0FBTCxDQUFXRCxPQUFsQixvQkFBNEJGLENBQTVCLEtBREssQ0FBZCxDQUdELENBekxrQix5REEyTE4sU0FBQ0EsQ0FBRCxDQUFRLElBQ1hJLENBQUFBLENBRFcsQ0FDTyxFQUFLRCxLQURaLENBQ1hDLGFBRFcsQ0FFZixDQUFDQSxDQUZjLEVBSWZBLENBQWEsQ0FBQ0osQ0FBRCxDQUpFLEdBS2pCLE1BQU9JLENBQUFBLENBQWEsQ0FBQ0osQ0FBRCxDQUxILENBTWpCLEVBQUtDLFFBQUwsQ0FBYyxDQUFFRyxhQUFhLENBQWJBLENBQUYsQ0FBZCxDQU5pQixDQVFwQixDQW5Na0IsZ0VBcU1DLFNBQUNDLENBQUQsQ0FBUUMsQ0FBUixDQUFrQixJQUloQ0MsQ0FBQUEsQ0FKZ0MsR0FDb0IsRUFBS0osS0FEekIsQ0FDNUJLLENBRDRCLEdBQzVCQSxVQUQ0QixDQUNoQkMsQ0FEZ0IsR0FDaEJBLGNBRGdCLENBQ0FDLENBREEsR0FDQUEsZUFEQSxDQUU5QlYsQ0FGOEIsQ0FFTE0sQ0FGSyxDQUU5Qk4sRUFGOEIsQ0FFMUJXLENBRjBCLENBRUxMLENBRkssQ0FFMUJLLElBRjBCLENBRXBCQyxDQUZvQixDQUVMTixDQUZLLENBRXBCTSxVQUZvQixDQU1wQyxHQUFtQixVQUFmLEdBQUFOLENBQUssQ0FBQ0ssSUFBVixDQUErQixJQUN2QkUsQ0FBQUEsQ0FBTSxvQkFBT0wsQ0FBVSxDQUFD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QkUsY0FBYyxDQUFFckYsQ0FBUSxDQUFDd0csY0FqQjNCLENBa0JFLE1BQU0sQ0FBRSxLQUFLdEosS0FBTCxDQUFXQyxhQWxCckIsQ0FtQkUsVUFBVSxDQUFFLEtBQUtzSixVQW5CbkIsQ0FvQkUsWUFBWSxDQUFFaEIsQ0FwQmhCLEVBREYsQ0F1QkcsQ0FBQyxDQUFDekYsQ0FBUSxDQUFDZ0YsVUFBVixFQUNDaEYsQ0FBUSxDQUFDZ0YsVUFBVCxFQUNDaEYsQ0FBUSxDQUFDZ0YsVUFBVCxDQUFvQjBCLEtBQXBCLENBQTBCOUgsTUFBMUIsR0FBcUNpRCxDQUZ4QyxHQUdDLGdDQUFDLGtCQUFELEVBQ0UsTUFBTSxDQUFFOEQsQ0FEVixDQUVFLE9BQU8sQ0FBRUMsQ0FGWCxDQUdFLFFBQVEsQ0FBRTVGLENBSFosQ0FJRSxVQUFVLENBQUVvRixDQUpkLENBS0UsVUFBVSxDQUFFWSxDQUxkLENBTUUsVUFBVSxDQUFFN0YsQ0FOZCxDQU9FLFFBQVEsQ0FBRSxLQUFLK0UsUUFQakIsQ0FRRSxjQUFjLENBQUVRLENBUmxCLEVBMUJKLENBakJGLENBREQsQ0EwREMsRUEvRUosQ0FtRkgsQyxPQW5sQnVCaUIsZ0IsRUFzbEIxQjlKLFdBQVcsQ0FBQytKLFlBQVosQ0FBMkIsQ0FDekJ6QixLQUFLLEdBRG9CLENBRXpCQyxVQUFVLEdBRmUsQ0FHekJDLG9CQUFvQixHQUhLLENBSXpCNUUsa0JBQWtCLEdBSk8sQyxjQVNaNUQsVyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBmZXRjaCBmcm9tIFwiaXNvbW9ycGhpYy11bmZldGNoXCI7XG5pbXBvcnQgUmVuZGVyRmllbGRzIGZyb20gXCIuL0Zvcm1FbGVtZW50cy9SZW5kZXJGaWVsZHNcIjtcbmltcG9ydCBGb3JtRXJyb3IgZnJvbSBcIi4vRm9ybUVsZW1lbnRzL0Zvcm1FcnJvclwiO1xuaW1wb3J0IEZvcm1Db25maXJtYXRpb24gZnJvbSBcIi4vRm9ybUVsZW1lbnRzL0Zvcm1Db25maXJtYXRpb25cIjtcbmltcG9ydCB7IHZhbGlkYXRlRmllbGQgfSBmcm9tIFwiLi9IZWxwZXJzL3ZhbGlkYXRpb25cIjtcbmltcG9ydCBTdWJtaXQgZnJvbSBcIi4vRm9ybUVsZW1lbnRzL1N1Ym1pdFwiO1xuXG5jbGFzcyBHcmF2aXR5Rm9ybSBleHRlbmRzIENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBzdWJtaXRGYWlsZWQ6IGZhbHNlLFxuICAgICAgZXJyb3JNZXNzYWdlczogZmFsc2UsXG4gICAgICBmb3JtVmFsdWVzOiB7fSxcbiAgICAgIGxvYWRpbmc6IHRydWUsXG4gICAgICBzdWJtaXR0aW5nOiBmYWxzZSxcbiAgICAgIHN1Ym1pdFN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgY29uZmlybWF0aW9uTWVzc2FnZTogZmFsc2UsXG4gICAgICBpc1ZhbGlkOiBmYWxzZSxcbiAgICAgIGZvcm1EYXRhOiB7fSxcbiAgICAgIHRvdWNoZWQ6IHt9LFxuICAgICAgYWN0aXZlUGFnZTogZmFsc2UsXG4gICAgICBjb25kaXRpb25GaWVsZHM6IHt9LFxuICAgICAgY29uZGl0aW9hbmxJZHM6IHt9LFxuICAgICAgaXNNdWx0aXBhcnQ6IGZhbHNlLFxuICAgIH07XG4gIH1cblxuICBhc3luYyBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICBjb25zdCB7XG4gICAgICBmb3JtSUQsXG4gICAgICBiYWNrZW5kVXJsLFxuICAgICAgcG9wdWxhdGVkRmllbGRzLFxuICAgICAgcG9wdWxhdGVkRW50cnksXG4gICAgICBmZXRjaE9wdGlvbnMsXG4gICAgICBpbml0aWFsUGFnZSxcbiAgICAgIGdldFBhcmFtcyxcbiAgICB9ID0gdGhpcy5wcm9wcztcbiAgICB0aGlzLl9pc01vdW50ZWQgPSB0cnVlO1xuICAgIGxldCBpc011bHRpcGFydCA9IGZhbHNlO1xuXG4gICAgY29uc3QgcXVlcnlTdHJpbmcgPSBnZXRQYXJhbXNcbiAgICAgID8gT2JqZWN0LmtleXMoZ2V0UGFyYW1zKVxuICAgICAgICAgIC5tYXAoKGtleSkgPT4ga2V5ICsgXCI9XCIgKyBnZXRQYXJhbXNba2V5XSlcbiAgICAgICAgICAuam9pbihcIiZcIilcbiAgICAgIDogXCJcIjtcbiAgICBjb25zdCByZXF1ZXN0VXJsID0gYCR7YmFja2VuZFVybH0vJHtmb3JtSUR9JHtcbiAgICAgIHF1ZXJ5U3RyaW5nID8gYD8ke3F1ZXJ5U3RyaW5nfWAgOiBcIlwiXG4gICAgfWA7XG5cbiAgICBjb25zdCBmb3JtID0gYXdhaXQgZmV0Y2gocmVxdWVzdFVybCwgZmV0Y2hPcHRpb25zKVxuICAgICAgLnRoZW4oKHJlc3ApID0+IHJlc3AuanNvbigpKVxuICAgICAgLnRoZW4oKHJlc3BvbnNlKSA9PiByZXNwb25zZSlcbiAgICAgIC5jYXRjaCgoKSA9PiBmYWxzZSk7XG5cbiAgICBpZiAoZm9ybSAmJiB0aGlzLl9pc01vdW50ZWQpIHtcbiAgICAgIGNvbnN0IGZvcm1WYWx1ZXMgPSB7fTtcbiAgICAgIGNvbnN0IGNvbmRpdGlvbkZpZWxkcyA9IFtdO1xuICAgICAgY29uc3QgY29uZGl0aW9hbmxJZHMgPSBbXTtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1yZXN0cmljdGVkLXN5bnRheFxuICAgICAgZm9yIChjb25zdCBmaWVsZCBvZiBmb3JtLmZpZWxkcykge1xuICAgICAgICBsZXQgdmFsdWU7XG4gICAgICAgIGxldCBoYXNQb3B1bGF0ZWRFbnRyeSA9IGZhbHNlO1xuICAgICAgICBjb25zdCBoYXNQb3B1bGF0aW9uID1cbiAgICAgICAgICBmaWVsZC5pbnB1dE5hbWUgJiZcbiAgICAgICAgICBwb3B1bGF0ZWRGaWVsZHMgJiZcbiAgICAgICAgICBwb3B1bGF0ZWRGaWVsZHNbZmllbGQuaW5wdXROYW1lXTtcblxuICAgICAgICBpZiAocG9wdWxhdGVkRW50cnkgJiYgcG9wdWxhdGVkRW50cnlbZmllbGQuaWRdKSB7XG4gICAgICAgICAgaGFzUG9wdWxhdGVkRW50cnkgPSB0cnVlO1xuICAgICAgICB9IGVsc2UgaWYgKHBvcHVsYXRlZEVudHJ5ICYmIGZpZWxkLmlucHV0cykge1xuICAgICAgICAgIGZpZWxkLmlucHV0cy5zb21lKChpbnB1dCkgPT4ge1xuICAgICAgICAgICAgaWYgKHBvcHVsYXRlZEVudHJ5W2lucHV0LmlkXSkge1xuICAgICAgICAgICAgICBoYXNQb3B1bGF0ZWRFbnRyeSA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZmllbGQudHlwZSA9PT0gXCJjaGVja2JveFwiKSB7XG4gICAgICAgICAgdmFsdWUgPSBmaWVsZC5jaG9pY2VzXG4gICAgICAgICAgICAuZmlsdGVyKChjaG9pY2UpID0+XG4gICAgICAgICAgICAgIGhhc1BvcHVsYXRpb25cbiAgICAgICAgICAgICAgICA/IGNob2ljZS52YWx1ZSA9PT0gcG9wdWxhdGVkRmllbGRzW2ZpZWxkLmlucHV0TmFtZV1cbiAgICAgICAgICAgICAgICA6IGNob2ljZS5pc1NlbGVjdGVkXG4gICAgICAgICAgICApXG4gICAgICAgICAgICAubWFwKChjaG9pY2UpID0+IGNob2ljZS52YWx1ZSk7XG5cbiAgICAgICAgICBpZiAoaGFzUG9wdWxhdGVkRW50cnkpIHtcbiAgICAgICAgICAgIHZhbHVlID0gZmllbGQuaW5wdXRzXG4gICAgICAgICAgICAgIC5maWx0ZXIoKGNob2ljZSkgPT4gcG9wdWxhdGVkRW50cnlbY2hvaWNlLmlkXSlcbiAgICAgICAgICAgICAgLm1hcCgoY2hvaWNlKSA9PiBjaG9pY2UubGFiZWwpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChmaWVsZC50eXBlID09PSBcInJhZGlvXCIpIHtcbiAgICAgICAgICBpZiAoaGFzUG9wdWxhdGlvbikge1xuICAgICAgICAgICAgdmFsdWUgPSBwb3B1bGF0ZWRGaWVsZHNbZmllbGQuaW5wdXROYW1lXTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgcHJlc2VsZWN0ZWQgPSBmaWVsZC5jaG9pY2VzLmZpbmQoXG4gICAgICAgICAgICAgIChjaG9pY2UpID0+IGNob2ljZS5pc1NlbGVjdGVkXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgdmFsdWUgPSBwcmVzZWxlY3RlZCA/IHByZXNlbGVjdGVkLnZhbHVlIDogXCJcIjtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoZmllbGQudHlwZSA9PT0gXCJzZWxlY3RcIikge1xuICAgICAgICAgIGNvbnN0IHNlbGVjdGVkT3B0aW9uID0gZmllbGQuY2hvaWNlc1xuICAgICAgICAgICAgLmZpbHRlcigoY2hvaWNlKSA9PlxuICAgICAgICAgICAgICBoYXNQb3B1bGF0aW9uXG4gICAgICAgICAgICAgICAgPyBjaG9pY2UudmFsdWUgPT09IHBvcHVsYXRlZEZpZWxkc1tmaWVsZC5pbnB1dE5hbWVdXG4gICAgICAgICAgICAgICAgOiBjaG9pY2UuaXNTZWxlY3RlZFxuICAgICAgICAgICAgKVxuICAgICAgICAgICAgLm1hcCgoaXRlbSkgPT4gKHsgdmFsdWU6IGl0ZW0udmFsdWUsIGxhYmVsOiBpdGVtLnRleHQgfSkpO1xuICAgICAgICAgIHZhbHVlID1cbiAgICAgICAgICAgIHNlbGVjdGVkT3B0aW9uICYmIHNlbGVjdGVkT3B0aW9uLmxlbmd0aCA+IDBcbiAgICAgICAgICAgICAgPyBzZWxlY3RlZE9wdGlvblswXVxuICAgICAgICAgICAgICA6IFwiXCI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFsdWUgPSBoYXNQb3B1bGF0aW9uXG4gICAgICAgICAgICA/IHBvcHVsYXRlZEZpZWxkc1tmaWVsZC5pbnB1dE5hbWVdXG4gICAgICAgICAgICA6IGhhc1BvcHVsYXRlZEVudHJ5XG4gICAgICAgICAgICA/IHBvcHVsYXRlZEVudHJ5W2ZpZWxkLmlkXVxuICAgICAgICAgICAgOiBmaWVsZC5kZWZhdWx0VmFsdWU7XG4gICAgICAgICAgaWYgKGZpZWxkLnR5cGUgPT09IFwiZmlsZXVwbG9hZFwiKSB7XG4gICAgICAgICAgICBpc011bHRpcGFydCA9IHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gZ3JhYiBhbGwgY29uZGl0aW9uYWwgbG9naWMgZmllbGRzXG4gICAgICAgIGlmIChmaWVsZC5jb25kaXRpb25hbExvZ2ljKSB7XG4gICAgICAgICAgY29uc3QgdG1wRmllbGQgPSB7XG4gICAgICAgICAgICBpZDogZmllbGQuaWQsXG4gICAgICAgICAgICBjb25kaXRpb25hbExvZ2ljOiBmaWVsZC5jb25kaXRpb25hbExvZ2ljLFxuICAgICAgICAgIH07XG4gICAgICAgICAgY29uc3QgaWRzID0gZmllbGQuY29uZGl0aW9uYWxMb2dpYy5ydWxlcy5tYXAoKGl0ZW0pID0+IGl0ZW0uZmllbGRJZCk7XG4gICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpZHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IGlkID0gcGFyc2VJbnQoaWRzW2ldKTtcbiAgICAgICAgICAgIGlmIChjb25kaXRpb2FubElkcy5pbmRleE9mKGlkKSA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgY29uZGl0aW9hbmxJZHMucHVzaChpZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbmRpdGlvbkZpZWxkcy5wdXNoKHRtcEZpZWxkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvcm1WYWx1ZXNbZmllbGQuaWRdID0ge1xuICAgICAgICAgIHZhbGlkOiB2YWxpZGF0ZUZpZWxkKHZhbHVlLCBmaWVsZCksXG4gICAgICAgICAgdmFsdWUsXG4gICAgICAgICAgbGFiZWw6IGZpZWxkLmxhYmVsLFxuICAgICAgICAgIHBhZ2VOdW1iZXI6IGZpZWxkLnBhZ2VOdW1iZXIsXG4gICAgICAgICAgY3NzQ2xhc3M6IGZpZWxkLmNzc0NsYXNzLFxuICAgICAgICAgIGlzUmVxdWlyZWQ6IGZpZWxkLmlzUmVxdWlyZWQsXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgICAvLyBjaGVjayBjb25kaXRpb24gbG9naWNcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY29uZGl0aW9uRmllbGRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGZvcm1WYWx1ZXNbXG4gICAgICAgICAgY29uZGl0aW9uRmllbGRzW2ldLmlkXG4gICAgICAgIF0uaGlkZUZpZWxkID0gdGhpcy5jaGVja0NvbmRpdGlvbmFsTG9naWMoXG4gICAgICAgICAgY29uZGl0aW9uRmllbGRzW2ldLmNvbmRpdGlvbmFsTG9naWMsXG4gICAgICAgICAgZm9ybVZhbHVlc1xuICAgICAgICApO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnNldFN0YXRlKFxuICAgICAgICB7XG4gICAgICAgICAgZm9ybURhdGE6IGZvcm0sXG4gICAgICAgICAgZm9ybVZhbHVlcyxcbiAgICAgICAgICBhY3RpdmVQYWdlOiBpbml0aWFsUGFnZSA/IGluaXRpYWxQYWdlIDogZm9ybS5wYWdpbmF0aW9uID8gMSA6IGZhbHNlLFxuICAgICAgICAgIGNvbmRpdGlvbkZpZWxkcyxcbiAgICAgICAgICBjb25kaXRpb2FubElkcyxcbiAgICAgICAgICBpc011bHRpcGFydCxcbiAgICAgICAgfSxcbiAgICAgICAgKCkgPT4ge1xuICAgICAgICAgIC8vIHBhc3Mgc3RhdGUgdG8gcGFyZW50IGNvbXBvbmVudFxuICAgICAgICAgIGNvbnN0IHsgbmV4dFN0ZXAsIHByZXZTdGVwLCBhY3RpdmVQYWdlIH0gPSB0aGlzLnByb3BzO1xuICAgICAgICAgIGlmIChuZXh0U3RlcCkge1xuICAgICAgICAgICAgbmV4dFN0ZXAoKCkgPT4gdGhpcy5uZXh0U3RlcCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChwcmV2U3RlcCkge1xuICAgICAgICAgICAgcHJldlN0ZXAoKCkgPT4gdGhpcy5wcmV2U3RlcCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChhY3RpdmVQYWdlKSB7XG4gICAgICAgICAgICBhY3RpdmVQYWdlKHRoaXMuc3RhdGUuYWN0aXZlUGFnZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIHRoaXMuX2lzTW91bnRlZCA9IGZhbHNlO1xuICB9XG5cbiAgc2V0VG91Y2hlZCA9IChpZCkgPT4ge1xuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgdG91Y2hlZDogeyAuLi50aGlzLnN0YXRlLnRvdWNoZWQsIFtpZF06IHRydWUgfSxcbiAgICB9KTtcbiAgfTtcblxuICB1bnNldEVycm9yID0gKGlkKSA9PiB7XG4gICAgY29uc3QgeyBlcnJvck1lc3NhZ2VzIH0gPSB0aGlzLnN0YXRlO1xuICAgIGlmICghZXJyb3JNZXNzYWdlcykgcmV0dXJuO1xuXG4gICAgaWYgKGVycm9yTWVzc2FnZXNbaWRdKSB7XG4gICAgICBkZWxldGUgZXJyb3JNZXNzYWdlc1tpZF07XG4gICAgICB0aGlzLnNldFN0YXRlKHsgZXJyb3JNZXNzYWdlcyB9KTtcbiAgICB9XG4gIH07XG5cbiAgdXBkYXRlRm9ybUhhbmRsZXIgPSAoZXZlbnQsIGZpZWxkKSA9PiB7XG4gICAgY29uc3QgeyBmb3JtVmFsdWVzLCBjb25kaXRpb2FubElkcywgY29uZGl0aW9uRmllbGRzIH0gPSB0aGlzLnN0YXRlO1xuICAgIGxldCB7IGlkLCB0eXBlLCBpc1JlcXVpcmVkIH0gPSBmaWVsZDtcbiAgICAvLyBTZXQgbmV3IHZhbHVlXG4gICAgbGV0IHZhbHVlO1xuXG4gICAgaWYgKGZpZWxkLnR5cGUgPT09IFwiY2hlY2tib3hcIikge1xuICAgICAgY29uc3QgdmFsdWVzID0gWy4uLmZvcm1WYWx1ZXNbZmllbGQuaWRdLnZhbHVlXTtcbiAgICAgIGNvbnN0IGluZGV4ID0gdmFsdWVzLmluZGV4T2YoZXZlbnQudGFyZ2V0LnZhbHVlKTtcbiAgICAgIGlmIChpbmRleCA+IC0xKSB7XG4gICAgICAgIHZhbHVlcy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFsdWVzLnB1c2goZXZlbnQudGFyZ2V0LnZhbHVlKTtcbiAgICAgIH1cbiAgICAgIHZhbHVlID0gdmFsdWVzO1xuICAgIH0gZWxzZSBpZiAoZmllbGQudHlwZSA9PSBcImRhdGVcIiAmJiBmaWVsZC5kYXRlVHlwZSAhPT0gXCJkYXRlcGlja2VyXCIpIHtcbiAgICAgIGNvbnN0IHsgc3ViSWQsIGRhdGVMYWJlbCB9ID0gZmllbGQ7XG4gICAgICBjb25zdCB2YWx1ZXMgPSBbLi4uZm9ybVZhbHVlc1tmaWVsZC5pZF0udmFsdWVdO1xuICAgICAgdmFsdWVzW3N1YklkXSA9IHtcbiAgICAgICAgdmFsOiBldmVudC50YXJnZXQudmFsdWUsXG4gICAgICAgIGxhYmVsOiBkYXRlTGFiZWwsXG4gICAgICB9O1xuICAgICAgdmFsdWUgPSB2YWx1ZXM7XG4gICAgfSBlbHNlIGlmIChmaWVsZC50eXBlID09IFwiY29uc2VudFwiKSB7XG4gICAgICB2YWx1ZSA9IGV2ZW50LnRhcmdldCA/IGV2ZW50LnRhcmdldC5jaGVja2VkIDogXCJudWxsXCI7XG4gICAgfSBlbHNlIGlmIChcbiAgICAgIGZpZWxkLnR5cGUgPT09IFwicGFzc3dvcmRcIiB8fFxuICAgICAgKGZpZWxkLnR5cGUgPT09IFwiZW1haWxcIiAmJiBmaWVsZC5lbWFpbENvbmZpcm1FbmFibGVkKVxuICAgICkge1xuICAgICAgY29uc3QgeyBzdWJJZCB9ID0gZmllbGQ7XG4gICAgICBjb25zdCB2YWx1ZXMgPVxuICAgICAgICBmb3JtVmFsdWVzW2ZpZWxkLmlkXSAmJiBmb3JtVmFsdWVzW2ZpZWxkLmlkXS52YWx1ZVxuICAgICAgICAgID8gWy4uLmZvcm1WYWx1ZXNbZmllbGQuaWRdLnZhbHVlXVxuICAgICAgICAgIDogW107XG4gICAgICB2YWx1ZXNbc3ViSWRdID0ge1xuICAgICAgICB2YWw6IGV2ZW50LnRhcmdldC52YWx1ZSxcbiAgICAgIH07XG4gICAgICB2YWx1ZSA9IHZhbHVlcztcbiAgICB9IGVsc2Uge1xuICAgICAgdmFsdWUgPSBldmVudC50YXJnZXQgPyBldmVudC50YXJnZXQudmFsdWUgOiBcIm51bGxcIjtcbiAgICB9XG4gICAgLy8gaWYgZmllbGQgaXMgSUJBTlxuICAgIGlmICh0eXBlID09PSBcInRleHRcIiAmJiBmaWVsZC5jc3NDbGFzcy5pbmRleE9mKFwiaWJhblwiKSA+IC0xKSB7XG4gICAgICB0eXBlID0gXCJpYmFuXCI7XG4gICAgfVxuXG4gICAgLy8gVmFsaWRhdGUgZmllbGRcbiAgICBjb25zdCB2YWxpZCA9IHZhbGlkYXRlRmllbGQodmFsdWUsIGZpZWxkKTtcblxuICAgIC8vIGlmIGZpZWxkIElEIGlzIHNvbWV3aGVyZSBpbiBjb25kaXRpb25hbCBmaWVsZHNcbiAgICAvLyByZWNhbGN1bGF0ZSBhbGwgY29uZGl0aW9uc1xuICAgIGlmIChjb25kaXRpb2FubElkcy5pbmRleE9mKGlkKSAhPT0gLTEpIHtcbiAgICAgIGZvcm1WYWx1ZXNbaWRdLnZhbHVlID0gdmFsdWU7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvbmRpdGlvbkZpZWxkcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCB7IGlkIH0gPSBjb25kaXRpb25GaWVsZHNbaV07XG4gICAgICAgIGNvbnN0IGhpZGUgPSB0aGlzLmNoZWNrQ29uZGl0aW9uYWxMb2dpYyhcbiAgICAgICAgICBjb25kaXRpb25GaWVsZHNbaV0uY29uZGl0aW9uYWxMb2dpYyxcbiAgICAgICAgICBmb3JtVmFsdWVzXG4gICAgICAgICk7XG4gICAgICAgIGZvcm1WYWx1ZXNbaWRdLmhpZGVGaWVsZCA9IGhpZGU7XG4gICAgICAgIGlmIChoaWRlKSB7XG4gICAgICAgICAgaWYgKGZvcm1WYWx1ZXNbaWRdLmlzUmVxdWlyZWQgJiYgaGlkZSkge1xuICAgICAgICAgICAgZm9ybVZhbHVlc1tpZF0udmFsdWUgPSBcIlwiO1xuICAgICAgICAgIH1cbiAgICAgICAgICBmb3JtVmFsdWVzW2lkXS52YWxpZCA9ICEhZm9ybVZhbHVlc1tpZF0uaXNSZXF1aXJlZDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuc2V0U3RhdGUoXG4gICAgICB7XG4gICAgICAgIGZvcm1WYWx1ZXM6IHtcbiAgICAgICAgICAuLi5mb3JtVmFsdWVzLFxuICAgICAgICAgIFtpZF06IHtcbiAgICAgICAgICAgIHZhbHVlLFxuICAgICAgICAgICAgaWQsXG4gICAgICAgICAgICB2YWxpZCxcbiAgICAgICAgICAgIGxhYmVsOiBmaWVsZC5sYWJlbCxcbiAgICAgICAgICAgIHBhZ2VOdW1iZXI6IGZpZWxkLnBhZ2VOdW1iZXIsXG4gICAgICAgICAgICBjc3NDbGFzczogZmllbGQuY3NzQ2xhc3MsXG4gICAgICAgICAgICBpc1JlcXVpcmVkOiBmaWVsZC5pc1JlcXVpcmVkLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgICAgKCkgPT4ge1xuICAgICAgICAvLyBwYXNzIHN0YXRlIHRvIHBhcmVudCBjb21wb25lbnRcbiAgICAgICAgY29uc3QgeyBvbkNoYW5nZSwgb25DaGFuZ2VGaWVsZCB9ID0gdGhpcy5wcm9wcztcbiAgICAgICAgaWYgKG9uQ2hhbmdlKSB7XG4gICAgICAgICAgb25DaGFuZ2UodGhpcy5zdGF0ZS5mb3JtVmFsdWVzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob25DaGFuZ2VGaWVsZCkge1xuICAgICAgICAgIG9uQ2hhbmdlRmllbGQoe1xuICAgICAgICAgICAgW2lkXToge1xuICAgICAgICAgICAgICB2YWx1ZSxcbiAgICAgICAgICAgICAgaWQsXG4gICAgICAgICAgICAgIHZhbGlkLFxuICAgICAgICAgICAgICBsYWJlbDogZmllbGQubGFiZWwsXG4gICAgICAgICAgICAgIHBhZ2VOdW1iZXI6IGZpZWxkLnBhZ2VOdW1iZXIsXG4gICAgICAgICAgICAgIGNzc0NsYXNzOiBmaWVsZC5jc3NDbGFzcyxcbiAgICAgICAgICAgICAgaXNSZXF1aXJlZDogZmllbGQuaXNSZXF1aXJlZCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICApO1xuICB9O1xuXG4gIHNjcm9sbFRvQ29uZmlybWF0aW9uID0gKCkgPT4ge1xuICAgIGNvbnN0IHJlY3QgPSB0aGlzLndyYXBwZXJSZWZcbiAgICAgID8gdGhpcy53cmFwcGVyUmVmLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpXG4gICAgICA6IGZhbHNlO1xuICAgIGlmIChyZWN0ICYmIHdpbmRvdykge1xuICAgICAgY29uc3Qgc2Nyb2xsVG9wID1cbiAgICAgICAgd2luZG93LnBhZ2VZT2Zmc2V0IHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxUb3A7XG4gICAgICB3aW5kb3cuc2Nyb2xsVG8oe1xuICAgICAgICB0b3A6IHNjcm9sbFRvcCArIHJlY3QudG9wIC0gMTAwLFxuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIG9uU3VibWl0ID0gYXN5bmMgKGV2ZW50KSA9PiB7XG4gICAgY29uc3QgeyBvblN1Ym1pdDogY3VzdG9tT25TdWJtaXQgfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgZm9ybURhdGEgPSBuZXcgRm9ybURhdGEoZXZlbnQudGFyZ2V0KTtcblxuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICBpZiAoY3VzdG9tT25TdWJtaXQpIHtcbiAgICAgIGN1c3RvbU9uU3VibWl0KGZvcm1EYXRhKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIHN1Ym1pdHRpbmc6IHRydWUsXG4gICAgICAgIHN1Ym1pdFN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICBzdWJtaXRGYWlsZWQ6IGZhbHNlLFxuICAgICAgICBjb25maXJtYXRpb25NZXNzYWdlOiBmYWxzZSxcbiAgICAgICAgZXJyb3JNZXNzYWdlczogZmFsc2UsXG4gICAgICB9KTtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgZm9ybUlELFxuICAgICAgICBiYWNrZW5kVXJsLFxuICAgICAgICBqdW1wVG9Db25maXJtYXRpb24sXG4gICAgICAgIG9uU3VibWl0U3VjY2VzcyxcbiAgICAgIH0gPSB0aGlzLnByb3BzO1xuICAgICAgY29uc3QgZ2ZTdWJtaXNzaW9uVXJsID0gYmFja2VuZFVybC5zdWJzdHJpbmcoXG4gICAgICAgIDAsXG4gICAgICAgIGJhY2tlbmRVcmwuaW5kZXhPZihcIi93cC1qc29uXCIpXG4gICAgICApO1xuXG4gICAgICBmZXRjaChgJHtnZlN1Ym1pc3Npb25Vcmx9L3dwLWpzb24vZ2YvdjIvZm9ybXMvJHtmb3JtSUR9L3N1Ym1pc3Npb25zYCwge1xuICAgICAgICBtZXRob2Q6IFwiUE9TVFwiLFxuICAgICAgICBib2R5OiBmb3JtRGF0YSxcbiAgICAgIH0pXG4gICAgICAgIC50aGVuKChyZXNwKSA9PiByZXNwLmpzb24oKSlcbiAgICAgICAgLnRoZW4oKHJlc3BvbnNlKSA9PiB7XG4gICAgICAgICAgaWYgKHJlc3BvbnNlICYmIHJlc3BvbnNlLmlzX3ZhbGlkKSB7XG4gICAgICAgICAgICBpZiAob25TdWJtaXRTdWNjZXNzKSB7XG4gICAgICAgICAgICAgIGNvbnN0IHJlcyA9IG9uU3VibWl0U3VjY2VzcyhyZXNwb25zZSk7XG4gICAgICAgICAgICAgIGlmICghcmVzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBjb25maXJtYXRpb25NZXNzYWdlID0gcmVzcG9uc2UuY29uZmlybWF0aW9uX21lc3NhZ2U7XG4gICAgICAgICAgICBjb25zdCB7IHR5cGUsIGxpbmsgfSA9IGNvbmZpcm1hdGlvbk1lc3NhZ2UgfHwgZmFsc2U7XG4gICAgICAgICAgICBpZiAodHlwZSAmJiBsaW5rICYmIHR5cGUgPT09IFwicmVkaXJlY3RcIikge1xuICAgICAgICAgICAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKGxpbmspO1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICAgIHN1Ym1pdHRpbmc6IGZhbHNlLFxuICAgICAgICAgICAgICBzdWJtaXRTdWNjZXNzOiB0cnVlLFxuICAgICAgICAgICAgICBjb25maXJtYXRpb25NZXNzYWdlOiByZXNwb25zZS5jb25maXJtYXRpb25fbWVzc2FnZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKGp1bXBUb0NvbmZpcm1hdGlvbikge1xuICAgICAgICAgICAgICB0aGlzLnNjcm9sbFRvQ29uZmlybWF0aW9uKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IHtcbiAgICAgICAgICAgICAgcmVzcG9uc2UsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgICAgLmNhdGNoKChlcnJvcikgPT4ge1xuICAgICAgICAgIGNvbnN0IGVycm9yTWVzc2FnZXMgPVxuICAgICAgICAgICAgZXJyb3IgJiYgZXJyb3IucmVzcG9uc2UgJiYgZXJyb3IucmVzcG9uc2UudmFsaWRhdGlvbl9tZXNzYWdlc1xuICAgICAgICAgICAgICA/IGVycm9yLnJlc3BvbnNlLnZhbGlkYXRpb25fbWVzc2FnZXNcbiAgICAgICAgICAgICAgOiBcIlNvbWV0aGluZyB3ZW50IHdyb25nXCI7XG4gICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICBzdWJtaXR0aW5nOiBmYWxzZSxcbiAgICAgICAgICAgIHN1Ym1pdEZhaWxlZDogdHJ1ZSxcbiAgICAgICAgICAgIGVycm9yTWVzc2FnZXMsXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgaWYgKGp1bXBUb0NvbmZpcm1hdGlvbikge1xuICAgICAgICAgICAgdGhpcy5zY3JvbGxUb0NvbmZpcm1hdGlvbigpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIG5leHRTdGVwID0gKGUpID0+IHtcbiAgICBlICYmIGUucHJldmVudERlZmF1bHQoKTtcbiAgICBjb25zdCB7IGFjdGl2ZVBhZ2UgfSA9IHRoaXMuc3RhdGU7XG4gICAgY29uc3QgeyBhY3RpdmVQYWdlOiBzZXRBY3RpdmUgfSA9IHRoaXMucHJvcHM7XG5cbiAgICBzZXRBY3RpdmUgJiYgc2V0QWN0aXZlKGFjdGl2ZVBhZ2UgKyAxKTtcbiAgICB0aGlzLnNldFN0YXRlKFxuICAgICAge1xuICAgICAgICBhY3RpdmVQYWdlOiBhY3RpdmVQYWdlICsgMSxcbiAgICAgIH0sXG4gICAgICAoKSA9PiB0aGlzLnNjcm9sbFRvQ29uZmlybWF0aW9uKClcbiAgICApO1xuICB9O1xuXG4gIHByZXZTdGVwID0gKGUpID0+IHtcbiAgICBlICYmIGUucHJldmVudERlZmF1bHQoKTtcbiAgICBjb25zdCB7IGFjdGl2ZVBhZ2UgfSA9IHRoaXMuc3RhdGU7XG4gICAgY29uc3QgeyBhY3RpdmVQYWdlOiBzZXRBY3RpdmUgfSA9IHRoaXMucHJvcHM7XG5cbiAgICBzZXRBY3RpdmUgJiYgc2V0QWN0aXZlKGFjdGl2ZVBhZ2UgLSAxKTtcbiAgICB0aGlzLnNldFN0YXRlKFxuICAgICAge1xuICAgICAgICBhY3RpdmVQYWdlOiBhY3RpdmVQYWdlIC0gMSxcbiAgICAgIH0sXG4gICAgICAoKSA9PiB0aGlzLnNjcm9sbFRvQ29uZmlybWF0aW9uKClcbiAgICApO1xuICB9O1xuXG4gIGNoZWNrQ29uZGl0aW9uYWxMb2dpYyA9IChjb25kaXRpb24sIGZpZWxkcyA9IGZhbHNlKSA9PiB7XG4gICAgY29uc3QgeyBydWxlcywgYWN0aW9uVHlwZSB9ID0gY29uZGl0aW9uO1xuICAgIGlmICghcnVsZXMpIHJldHVybiB0cnVlO1xuXG4gICAgY29uc3QgZm9ybVZhbHVlcyA9IGZpZWxkcyB8fCB0aGlzLnN0YXRlLmZvcm1WYWx1ZXM7XG5cbiAgICAvLyBzaG93IG9ubHkgaWYgaXMgc2VsZWN0ZWQgXCJBbGwgZmllbGRzXCIgKGl0IHNob3VsZCBiZSB0d2Vha2VkIGluIGZ1dHVyZSlcbiAgICAvLyB3b3JrcyBvbmx5IFwic2hvdy9oaWRlIHdoZW4gZmllbGQgaXMgZXF1YWwgdG9cIlxuICAgIGxldCBoaWRlRmllbGQgPSBhY3Rpb25UeXBlICE9PSBcImhpZGVcIjtcbiAgICBjb25zdCBoaWRlQmFzZWRPblJ1bGVzID0gW107XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBydWxlcy5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgeyBmaWVsZElkLCB2YWx1ZSwgb3BlcmF0b3IgfSA9IHJ1bGVzW2ldO1xuICAgICAgY29uc3QgY29uZGl0aW9uRmllbGRWYWx1ZSA9XG4gICAgICAgIGZvcm1WYWx1ZXNbZmllbGRJZF0udmFsdWUgJiYgZm9ybVZhbHVlc1tmaWVsZElkXS52YWx1ZS52YWx1ZVxuICAgICAgICAgID8gZm9ybVZhbHVlc1tmaWVsZElkXS52YWx1ZS52YWx1ZVxuICAgICAgICAgIDogZm9ybVZhbHVlc1tmaWVsZElkXS52YWx1ZSB8fCBmYWxzZTtcblxuICAgICAgY29uc3Qgc3RyaW5nVmFsdWUgPSBBcnJheS5pc0FycmF5KGNvbmRpdGlvbkZpZWxkVmFsdWUpXG4gICAgICAgID8gY29uZGl0aW9uRmllbGRWYWx1ZS5qb2luKFwiXCIpXG4gICAgICAgIDogY29uZGl0aW9uRmllbGRWYWx1ZTtcblxuICAgICAgLy8gQ2hlY2sgaWYgY29tcGFyaXNpb24gdmFsdWUgaXMgZW1wdHlcbiAgICAgIGlmICghdmFsdWUpIHtcbiAgICAgICAgaWYgKCFzdHJpbmdWYWx1ZSAmJiAhdmFsdWUpIHtcbiAgICAgICAgICBoaWRlQmFzZWRPblJ1bGVzW2ldID0gYWN0aW9uVHlwZSA9PT0gXCJoaWRlXCI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaGlkZUJhc2VkT25SdWxlc1tpXSA9IGFjdGlvblR5cGUgIT09IFwiaGlkZVwiO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHN0cmluZ1ZhbHVlICYmIHZhbHVlID09IHN0cmluZ1ZhbHVlKSB7XG4gICAgICAgIGhpZGVCYXNlZE9uUnVsZXNbaV0gPSBhY3Rpb25UeXBlID09PSBcImhpZGVcIjtcbiAgICAgIH0gZWxzZSBpZiAoc3RyaW5nVmFsdWUgJiYgc3RyaW5nVmFsdWUuaW5jbHVkZXModmFsdWUpKSB7XG4gICAgICAgIGhpZGVCYXNlZE9uUnVsZXNbaV0gPSBhY3Rpb25UeXBlID09PSBcImhpZGVcIjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGhpZGVCYXNlZE9uUnVsZXNbaV0gPSBhY3Rpb25UeXBlICE9PSBcImhpZGVcIjtcbiAgICAgIH1cblxuICAgICAgLy8gSWYgb3BlcmF0b3IgaXMgJ2lzbm90JyByZXZlcnNlIHZhbHVlXG4gICAgICBpZiAob3BlcmF0b3IgPT09IFwiaXNub3RcIikge1xuICAgICAgICBoaWRlQmFzZWRPblJ1bGVzW2ldID0gIWhpZGVCYXNlZE9uUnVsZXNbaV07XG4gICAgICB9XG4gICAgfVxuXG4gICAgaGlkZUZpZWxkID0gaGlkZUJhc2VkT25SdWxlcy5ldmVyeSgoaSkgPT4gaSA9PT0gdHJ1ZSk7XG4gICAgLy8gZm9ybVZhbHVlc1tpZF0uaGlkZUZpZWxkID0gaGlkZUZpZWxkO1xuICAgIC8vIHRoaXMuc2V0U3RhdGUoeyBmb3JtVmFsdWVzIH0pO1xuICAgIHJldHVybiBoaWRlRmllbGQ7XG4gIH07XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHtcbiAgICAgIGZvcm1EYXRhLFxuICAgICAgZm9ybVZhbHVlcyxcbiAgICAgIHN1Ym1pdEZhaWxlZCxcbiAgICAgIHN1Ym1pdFN1Y2Nlc3MsXG4gICAgICB0b3VjaGVkLFxuICAgICAgc3VibWl0dGluZyxcbiAgICAgIGFjdGl2ZVBhZ2UsXG4gICAgICBpc011bHRpcGFydCxcbiAgICB9ID0gdGhpcy5zdGF0ZTtcbiAgICBjb25zdCB7XG4gICAgICB0aXRsZSxcbiAgICAgIHN1Ym1pdEljb24sXG4gICAgICBzYXZlU3RhdGVUb0h0bWxGaWVsZCxcbiAgICAgIHN0eWxlZENvbXBvbmVudHMsXG4gICAgICBjdXN0b21Db21wb25lbnRzLFxuICAgICAgZXJyb3JNZXNzYWdlLFxuICAgICAgZHJvcHpvbmVUZXh0LFxuICAgICAgbG9hZGluZ1NwaW5uZXIsXG4gICAgfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgeyBCdXR0b24sIExvYWRpbmcsIEdGV3JhcHBlciA9IFwiZGl2XCIsIEZvcm1FcnJvcjogU0Zvcm1FcnJvciB9ID1cbiAgICAgIHN0eWxlZENvbXBvbmVudHMgfHwgZmFsc2U7XG5cbiAgICBjb25zdCB7IGNzc0NsYXNzIH0gPSBmb3JtRGF0YTtcblxuICAgIGNvbnN0IGlzRGlzYWJsZWQgPSBPYmplY3Qua2V5cyhmb3JtVmFsdWVzKS5zb21lKFxuICAgICAgKHgpID0+ICFmb3JtVmFsdWVzW3hdLmhpZGVGaWVsZCAmJiBmb3JtVmFsdWVzW3hdLnZhbGlkXG4gICAgKTtcbiAgICBjb25zdCBpc05leHREaXNhYmxlZCA9IGFjdGl2ZVBhZ2VcbiAgICAgID8gT2JqZWN0LmtleXMoZm9ybVZhbHVlcykuc29tZShcbiAgICAgICAgICAoeCkgPT5cbiAgICAgICAgICAgIGZvcm1WYWx1ZXNbeF0ucGFnZU51bWJlciA9PT0gYWN0aXZlUGFnZSAmJlxuICAgICAgICAgICAgIWZvcm1WYWx1ZXNbeF0uaGlkZUZpZWxkICYmXG4gICAgICAgICAgICBmb3JtVmFsdWVzW3hdLnZhbGlkXG4gICAgICAgIClcbiAgICAgIDogZmFsc2U7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPEdGV3JhcHBlclxuICAgICAgICByZWY9eyhlbCkgPT4gKHRoaXMud3JhcHBlclJlZiA9IGVsKX1cbiAgICAgICAgY2xhc3NOYW1lPVwiZm9ybS13cmFwcGVyXCJcbiAgICAgICAgY3NzPXt7IHBvc2l0aW9uOiBcInJlbGF0aXZlXCIgfX1cbiAgICAgICAgaWQ9e2BncmF2aXR5X2Zvcm1fJHt0aGlzLnByb3BzLmZvcm1JRH1gfVxuICAgICAgPlxuICAgICAgICB7Zm9ybURhdGEudGl0bGUgPyBudWxsIDogTG9hZGluZyAmJiA8TG9hZGluZyBpc0xvYWRpbmcgLz59XG5cbiAgICAgICAge3N1Ym1pdEZhaWxlZCAmJiAhc3VibWl0U3VjY2VzcyAmJiAoXG4gICAgICAgICAgPEZvcm1FcnJvclxuICAgICAgICAgICAgU0Zvcm1FcnJvcj17U0Zvcm1FcnJvciB8fCBmYWxzZX1cbiAgICAgICAgICAgIGVycm9yTWVzc2FnZT17XG4gICAgICAgICAgICAgIGVycm9yTWVzc2FnZSB8fCBcIlRoZXJlIHdhcyBhIHByb2JsZW0gd2l0aCB5b3VyIHN1Ym1pc3Npb25cIlxuICAgICAgICAgICAgfVxuICAgICAgICAgIC8+XG4gICAgICAgICl9XG5cbiAgICAgICAge3N1Ym1pdFN1Y2Nlc3MgJiYgdGhpcy5zdGF0ZS5jb25maXJtYXRpb25NZXNzYWdlICYmIChcbiAgICAgICAgICA8Rm9ybUNvbmZpcm1hdGlvbiBjb25maXJtYXRpb249e3RoaXMuc3RhdGUuY29uZmlybWF0aW9uTWVzc2FnZX0gLz5cbiAgICAgICAgKX1cblxuICAgICAgICB7IXN1Ym1pdFN1Y2Nlc3MgJiYgZm9ybURhdGEuZmllbGRzID8gKFxuICAgICAgICAgIDxmb3JtXG4gICAgICAgICAgICBvblN1Ym1pdD17KGUpID0+IHRoaXMub25TdWJtaXQoZSl9XG4gICAgICAgICAgICBjbGFzc05hbWU9e2Nzc0NsYXNzfVxuICAgICAgICAgICAgZW5jVHlwZT17aXNNdWx0aXBhcnQgPyBcIm11bHRpcGFydC9mb3JtLWRhdGFcIiA6IHVuZGVmaW5lZH1cbiAgICAgICAgICAgIG5vVmFsaWRhdGVcbiAgICAgICAgICA+XG4gICAgICAgICAgICB7KGZvcm1EYXRhLnRpdGxlIHx8IGZvcm1EYXRhLmRlc2NyaXB0aW9uKSAmJiAoXG4gICAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAge2Zvcm1EYXRhLnRpdGxlICYmIHRpdGxlID8gKFxuICAgICAgICAgICAgICAgICAgPGgzIGNsYXNzTmFtZT1cImZvcm0tdGl0bGVcIj57Zm9ybURhdGEudGl0bGV9PC9oMz5cbiAgICAgICAgICAgICAgICApIDogbnVsbH1cbiAgICAgICAgICAgICAgICB7Zm9ybURhdGEuZGVzY3JpcHRpb24gPyAoXG4gICAgICAgICAgICAgICAgICA8cCBjbGFzc05hbWU9XCJmb3JtLWRlc2NyaXB0aW9uXCI+e2Zvcm1EYXRhLmRlc2NyaXB0aW9ufTwvcD5cbiAgICAgICAgICAgICAgICApIDogbnVsbH1cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICApfVxuXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZvcm0td3JhcHBlclwiPlxuICAgICAgICAgICAgICA8UmVuZGVyRmllbGRzXG4gICAgICAgICAgICAgICAgc3R5bGVkQ29tcG9uZW50cz17c3R5bGVkQ29tcG9uZW50c31cbiAgICAgICAgICAgICAgICBjdXN0b21Db21wb25lbnRzPXtjdXN0b21Db21wb25lbnRzfVxuICAgICAgICAgICAgICAgIGZpZWxkcz17Zm9ybURhdGEuZmllbGRzfVxuICAgICAgICAgICAgICAgIGZvcm1WYWx1ZXM9e2Zvcm1WYWx1ZXN9XG4gICAgICAgICAgICAgICAgc3VibWl0RmFpbGVkPXtzdWJtaXRGYWlsZWR9XG4gICAgICAgICAgICAgICAgc3VibWl0U3VjY2Vzcz17c3VibWl0U3VjY2Vzc31cbiAgICAgICAgICAgICAgICB1cGRhdGVGb3JtPXt0aGlzLnVwZGF0ZUZvcm1IYW5kbGVyfVxuICAgICAgICAgICAgICAgIHRvdWNoZWQ9e3RvdWNoZWR9XG4gICAgICAgICAgICAgICAgc2V0VG91Y2hlZD17dGhpcy5zZXRUb3VjaGVkfVxuICAgICAgICAgICAgICAgIHBhZ2luYXRpb249e2Zvcm1EYXRhLnBhZ2luYXRpb259XG4gICAgICAgICAgICAgICAgYWN0aXZlUGFnZT17YWN0aXZlUGFnZX1cbiAgICAgICAgICAgICAgICBwcmV2U3RlcD17dGhpcy5wcmV2U3RlcH1cbiAgICAgICAgICAgICAgICBuZXh0U3RlcD17dGhpcy5uZXh0U3RlcH1cbiAgICAgICAgICAgICAgICBpc05leHREaXNhYmxlZD17aXNOZXh0RGlzYWJsZWR9XG4gICAgICAgICAgICAgICAgY2hlY2tDb25kaXRpb25hbExvZ2ljPXt0aGlzLmNoZWNrQ29uZGl0aW9uYWxMb2dpY31cbiAgICAgICAgICAgICAgICBzYXZlU3RhdGVUb0h0bWxGaWVsZD17c2F2ZVN0YXRlVG9IdG1sRmllbGR9XG4gICAgICAgICAgICAgICAgZW5hYmxlSG9uZXlwb3Q9e2Zvcm1EYXRhLmVuYWJsZUhvbmV5cG90fVxuICAgICAgICAgICAgICAgIGVycm9ycz17dGhpcy5zdGF0ZS5lcnJvck1lc3NhZ2VzfVxuICAgICAgICAgICAgICAgIHVuc2V0RXJyb3I9e3RoaXMudW5zZXRFcnJvcn1cbiAgICAgICAgICAgICAgICBkcm9wem9uZVRleHQ9e2Ryb3B6b25lVGV4dH1cbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgeyghZm9ybURhdGEucGFnaW5hdGlvbiB8fFxuICAgICAgICAgICAgICAgIChmb3JtRGF0YS5wYWdpbmF0aW9uICYmXG4gICAgICAgICAgICAgICAgICBmb3JtRGF0YS5wYWdpbmF0aW9uLnBhZ2VzLmxlbmd0aCA9PT0gYWN0aXZlUGFnZSkpICYmIChcbiAgICAgICAgICAgICAgICA8U3VibWl0XG4gICAgICAgICAgICAgICAgICBCdXR0b249e0J1dHRvbn1cbiAgICAgICAgICAgICAgICAgIExvYWRpbmc9e0xvYWRpbmd9XG4gICAgICAgICAgICAgICAgICBmb3JtRGF0YT17Zm9ybURhdGF9XG4gICAgICAgICAgICAgICAgICBzdWJtaXRJY29uPXtzdWJtaXRJY29ufVxuICAgICAgICAgICAgICAgICAgaXNEaXNhYmxlZD17aXNEaXNhYmxlZH1cbiAgICAgICAgICAgICAgICAgIHN1Ym1pdHRpbmc9e3N1Ym1pdHRpbmd9XG4gICAgICAgICAgICAgICAgICBwcmV2U3RlcD17dGhpcy5wcmV2U3RlcH1cbiAgICAgICAgICAgICAgICAgIGxvYWRpbmdTcGlubmVyPXtsb2FkaW5nU3Bpbm5lcn1cbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPC9mb3JtPlxuICAgICAgICApIDogKFxuICAgICAgICAgIFwiXCJcbiAgICAgICAgKX1cbiAgICAgIDwvR0ZXcmFwcGVyPlxuICAgICk7XG4gIH1cbn1cblxuR3Jhdml0eUZvcm0uZGVmYXVsdFByb3BzID0ge1xuICB0aXRsZTogdHJ1ZSxcbiAgc3VibWl0SWNvbjogZmFsc2UsXG4gIHNhdmVTdGF0ZVRvSHRtbEZpZWxkOiBmYWxzZSxcbiAganVtcFRvQ29uZmlybWF0aW9uOiB0cnVlLFxufTtcblxuZXhwb3J0IHsgdmFsaWRhdGVGaWVsZCwgRm9ybUNvbmZpcm1hdGlvbiwgRm9ybUVycm9yLCBSZW5kZXJGaWVsZHMsIFN1Ym1pdCB9O1xuXG5leHBvcnQgZGVmYXVsdCBHcmF2aXR5Rm9ybTtcbiJdfQ==