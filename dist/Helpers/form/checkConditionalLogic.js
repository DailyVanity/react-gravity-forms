"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.checkConditionalLogic=checkConditionalLogic,exports.parseLogicType=parseLogicType,exports.parseOperator=parseOperator;function checkConditionalLogic(a,b=!1){const{rules:c,actionType:d,logicType:e}=a;if(!c)return!0;const f=[];c.forEach(({fieldId:a,value:c,operator:d},e)=>{const g=b[a].value;if(g instanceof Array){let a=0;0<g.length&&g.forEach(b=>{parseOperator(d,c,b)&&a++}),f[e]="isnot"==d?a==c.length:0<a}else f[e]=parseOperator(d,c,g)});let g=parseLogicType(e,f);return"show"===d&&(g=!g),g}function parseOperator(a,b,c){switch(a){case"is":return b===c;case"isnot":return b!=c;case"<":return b<c;case">":return b>c;case"contains":return 0<=b.indexOf(c);case"starts_with":return 0==b.indexOf(c);case"ends_with":{const a=b.length-c.length;if(0>a)return!1;const d=b.substring(a);return c==d}default:return console.error(`ERROR: ${a} is not known. showing field anyway`),!1}}function parseLogicType(a,b){return"any"===a?b.includes(!0):"all"===a?b.every(a=>!0===a):void 0}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,