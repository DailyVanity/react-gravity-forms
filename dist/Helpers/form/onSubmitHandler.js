"use strict";var _interopRequireDefault=require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports,"__esModule",{value:!0}),exports["default"]=void 0;var _regenerator=_interopRequireDefault(require("@babel/runtime/regenerator")),_asyncToGenerator2=_interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator")),_isomorphicUnfetch=_interopRequireDefault(require("isomorphic-unfetch")),_index=require("./index");function onSubmit(){return _onSubmit.apply(this,arguments)}function _onSubmit(){return _onSubmit=(0,_asyncToGenerator2["default"])(_regenerator["default"].mark(function a(b,c,d,e,f,g,h,i,j,k,l,m,n){var o,p,q,r,s,t,u,v,w;return _regenerator["default"].wrap(function(a){for(;;)switch(a.prev=a.next){case 0:if(o=c.onSubmit,p=new FormData(b.target),b.preventDefault(),q=(0,_index.forceValidation)(e,d,k,l),q){a.next=6;break}return a.abrupt("return",!1);case 6:o?o(p):(g(!0),i(!1),j(!1),m(!1),n(!1),r=c.formID,s=c.backendUrl,t=c.jumpToConfirmation,u=c.onSubmitSuccess,v=c.onError,w=s.substring(0,s.indexOf("/wp-json")),(0,_isomorphicUnfetch["default"])("".concat(w,"/wp-json/gf/v2/forms/").concat(r,"/submissions"),{method:"POST",body:p}).then(function(a){return a.json()}).then(function(a){if(console.log(a),a&&a.is_valid){if(console.log("valid"),u){var k=u(a);if(!k)return!1}var b=a.confirmation_message,d=b||!1,e=d.type,j=d.link;if(e&&j&&"redirect"===e&&"undefined"!=typeof window)return window.location.replace(j),!1;g(!1),i(!0),m(b),console.log(b),console.log(h),t&&(0,_index.scrollToConfirmation)(c,f)}else throw{response:a}})["catch"](function(a){var b=a&&a.response&&a.response.validation_messages?a.response.validation_messages:"Something went wrong";v?(v(b),g(!1),j(!0)):(g(!1),j(!0),n(b)),t&&(0,_index.scrollToConfirmation)(c,f)}));case 7:case"end":return a.stop();}},a)})),_onSubmit.apply(this,arguments)}var _default=onSubmit;exports["default"]=_default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9IZWxwZXJzL2Zvcm0vb25TdWJtaXRIYW5kbGVyLmpzIl0sIm5hbWVzIjpbIm9uU3VibWl0IiwiZXZlbnQiLCJwcm9wcyIsImZvcm1WYWx1ZXMiLCJhY3RpdmVQYWdlIiwid3JhcHBlclJlZiIsInNldFN1Ym1pdHRpbmciLCJzdWJtaXRTdWNjZXNzIiwic2V0U3VibWl0U3VjY2VzcyIsInNldFN1Ym1pdEZhaWxlZCIsInNldFNob3dQYWdlVmFsaWRhdGlvbk1zZyIsInNldFRvdWNoZWQiLCJzZXRDb25maXJtYXRpb25NZXNzYWdlIiwic2V0RXJyb3JNZXNzYWdlcyIsImN1c3RvbU9uU3VibWl0IiwiZm9ybURhdGEiLCJGb3JtRGF0YSIsInRhcmdldCIsInByZXZlbnREZWZhdWx0IiwiaXNQYWdlVmFsaWQiLCJmb3JtSUQiLCJiYWNrZW5kVXJsIiwianVtcFRvQ29uZmlybWF0aW9uIiwib25TdWJtaXRTdWNjZXNzIiwib25FcnJvciIsImdmU3VibWlzc2lvblVybCIsInN1YnN0cmluZyIsImluZGV4T2YiLCJtZXRob2QiLCJib2R5IiwidGhlbiIsInJlc3AiLCJqc29uIiwicmVzcG9uc2UiLCJjb25zb2xlIiwibG9nIiwiaXNfdmFsaWQiLCJyZXMiLCJjb25maXJtYXRpb25NZXNzYWdlIiwiY29uZmlybWF0aW9uX21lc3NhZ2UiLCJ0eXBlIiwibGluayIsIndpbmRvdyIsImxvY2F0aW9uIiwicmVwbGFjZSIsImVycm9yIiwiZXJyb3JNZXNzYWdlcyIsInZhbGlkYXRpb25fbWVzc2FnZXMiXSwibWFwcGluZ3MiOiJ5Y0FHZUEsQ0FBQUEsUSwrSUFBZixXQUNFQyxDQURGLENBRUVDLENBRkYsQ0FHRUMsQ0FIRixDQUlFQyxDQUpGLENBS0VDLENBTEYsQ0FNRUMsQ0FORixDQU9FQyxDQVBGLENBUUVDLENBUkYsQ0FTRUMsQ0FURixDQVVFQyxDQVZGLENBV0VDLENBWEYsQ0FZRUMsQ0FaRixDQWFFQyxDQWJGLCtHQWVvQkMsQ0FmcEIsQ0Fl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QSxDQUFPLENBQUNzQixDQUFELENBUE8sQ0FRZHhDLENBQWEsSUFSQyxDQVNkRyxDQUFlLElBVEQsR0FXZEgsQ0FBYSxJQVhDLENBWWRHLENBQWUsSUFaRCxDQWFkSSxDQUFnQixDQUFDaUMsQ0FBRCxDQWJGLEVBZ0JaeEIsQ0FoQlksRUFpQmQsZ0NBQXFCcEIsQ0FBckIsQ0FBNEJHLENBQTVCLENBRUgsQ0ExREgsQ0FuQ0oseUMsZ0RBaUdlTCxRIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGZldGNoIGZyb20gJ2lzb21vcnBoaWMtdW5mZXRjaCc7XG5pbXBvcnQgeyBmb3JjZVZhbGlkYXRpb24sIHNjcm9sbFRvQ29uZmlybWF0aW9uIH0gZnJvbSAnLi9pbmRleCc7XG5cbmFzeW5jIGZ1bmN0aW9uIG9uU3VibWl0KFxuICBldmVudCxcbiAgcHJvcHMsXG4gIGZvcm1WYWx1ZXMsXG4gIGFjdGl2ZVBhZ2UsXG4gIHdyYXBwZXJSZWYsXG4gIHNldFN1Ym1pdHRpbmcsXG4gIHN1Ym1pdFN1Y2Nlc3MsXG4gIHNldFN1Ym1pdFN1Y2Nlc3MsXG4gIHNldFN1Ym1pdEZhaWxlZCxcbiAgc2V0U2hvd1BhZ2VWYWxpZGF0aW9uTXNnLFxuICBzZXRUb3VjaGVkLFxuICBzZXRDb25maXJtYXRpb25NZXNzYWdlLFxuICBzZXRFcnJvck1lc3NhZ2VzXG4pIHtcbiAgY29uc3QgeyBvblN1Ym1pdDogY3VzdG9tT25TdWJtaXQgfSA9IHByb3BzO1xuICBjb25zdCBmb3JtRGF0YSA9IG5ldyBGb3JtRGF0YShldmVudC50YXJnZXQpO1xuXG4gIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgY29uc3QgaXNQYWdlVmFsaWQgPSBmb3JjZVZhbGlkYXRpb24oYWN0aXZlUGFnZSwgZm9ybVZhbHVlcywgc2V0U2hvd1BhZ2VWYWxpZGF0aW9uTXNnLCBzZXRUb3VjaGVkKTtcbiAgaWYgKCFpc1BhZ2VWYWxpZCkgcmV0dXJuIGZhbHNlO1xuXG4gIGlmIChjdXN0b21PblN1Ym1pdCkge1xuICAgIGN1c3RvbU9uU3VibWl0KGZvcm1EYXRhKTtcbiAgfSBlbHNlIHtcbiAgICBzZXRTdWJtaXR0aW5nKHRydWUpO1xuICAgIHNldFN1Ym1pdFN1Y2Nlc3MoZmFsc2UpO1xuICAgIHNldFN1Ym1pdEZhaWxlZChmYWxzZSk7XG4gICAgc2V0Q29uZmlybWF0aW9uTWVzc2FnZShmYWxzZSk7XG4gICAgc2V0RXJyb3JNZXNzYWdlcyhmYWxzZSk7XG5cbiAgICBjb25zdCB7IGZvcm1JRCwgYmFja2VuZFVybCwganVtcFRvQ29uZmlybWF0aW9uLCBvblN1Ym1pdFN1Y2Nlc3MsIG9uRXJyb3IgfSA9IHByb3BzO1xuICAgIGNvbnN0IGdmU3VibWlzc2lvblVybCA9IGJhY2tlbmRVcmwuc3Vic3RyaW5nKDAsIGJhY2tlbmRVcmwuaW5kZXhPZignL3dwLWpzb24nKSk7XG5cbiAgICBmZXRjaChgJHtnZlN1Ym1pc3Npb25Vcmx9L3dwLWpzb24vZ2YvdjIvZm9ybXMvJHtmb3JtSUR9L3N1Ym1pc3Npb25zYCwge1xuICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICBib2R5OiBmb3JtRGF0YSxcbiAgICB9KVxuICAgICAgLnRoZW4oKHJlc3ApID0+IHJlc3AuanNvbigpKVxuICAgICAgLnRoZW4oKHJlc3BvbnNlKSA9PiB7XG4gICAgICAgIGNvbnNvbGUubG9nKHJlc3BvbnNlKTtcbiAgICAgICAgaWYgKHJlc3BvbnNlICYmIHJlc3BvbnNlLmlzX3ZhbGlkKSB7XG4gICAgICAgICAgY29uc29sZS5sb2coJ3ZhbGlkJyk7XG5cbiAgICAgICAgICBpZiAob25TdWJtaXRTdWNjZXNzKSB7XG4gICAgICAgICAgICBjb25zdCByZXMgPSBvblN1Ym1pdFN1Y2Nlc3MocmVzcG9uc2UpO1xuICAgICAgICAgICAgaWYgKCFyZXMpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBjb25zdCBjb25maXJtYXRpb25NZXNzYWdlID0gcmVzcG9uc2UuY29uZmlybWF0aW9uX21lc3NhZ2U7XG4gICAgICAgICAgY29uc3QgeyB0eXBlLCBsaW5rIH0gPSBjb25maXJtYXRpb25NZXNzYWdlIHx8IGZhbHNlO1xuICAgICAgICAgIGlmICh0eXBlICYmIGxpbmsgJiYgdHlwZSA9PT0gJ3JlZGlyZWN0Jykge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKGxpbmspO1xuICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHNldFN1Ym1pdHRpbmcoZmFsc2UpO1xuICAgICAgICAgIHNldFN1Ym1pdFN1Y2Nlc3ModHJ1ZSk7XG4gICAgICAgICAgc2V0Q29uZmlybWF0aW9uTWVzc2FnZShjb25maXJtYXRpb25NZXNzYWdlKTtcbiAgICAgICAgICBjb25zb2xlLmxvZyhjb25maXJtYXRpb25NZXNzYWdlKTtcbiAgICAgICAgICBjb25zb2xlLmxvZyhzdWJtaXRTdWNjZXNzKTtcblxuICAgICAgICAgIGlmIChqdW1wVG9Db25maXJtYXRpb24pIHtcbiAgICAgICAgICAgIHNjcm9sbFRvQ29uZmlybWF0aW9uKHByb3BzLCB3cmFwcGVyUmVmKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhyb3cge1xuICAgICAgICAgICAgcmVzcG9uc2UsXG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICAgIC5jYXRjaCgoZXJyb3IpID0+IHtcbiAgICAgICAgY29uc3QgZXJyb3JNZXNzYWdlcyA9XG4gICAgICAgICAgZXJyb3IgJiYgZXJyb3IucmVzcG9uc2UgJiYgZXJyb3IucmVzcG9uc2UudmFsaWRhdGlvbl9tZXNzYWdlc1xuICAgICAgICAgICAgPyBlcnJvci5yZXNwb25zZS52YWxpZGF0aW9uX21lc3NhZ2VzXG4gICAgICAgICAgICA6ICdTb21ldGhpbmcgd2VudCB3cm9uZyc7XG5cbiAgICAgICAgaWYgKG9uRXJyb3IpIHtcbiAgICAgICAgICBvbkVycm9yKGVycm9yTWVzc2FnZXMpO1xuICAgICAgICAgIHNldFN1Ym1pdHRpbmcoZmFsc2UpO1xuICAgICAgICAgIHNldFN1Ym1pdEZhaWxlZCh0cnVlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzZXRTdWJtaXR0aW5nKGZhbHNlKTtcbiAgICAgICAgICBzZXRTdWJtaXRGYWlsZWQodHJ1ZSk7XG4gICAgICAgICAgc2V0RXJyb3JNZXNzYWdlcyhlcnJvck1lc3NhZ2VzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChqdW1wVG9Db25maXJtYXRpb24pIHtcbiAgICAgICAgICBzY3JvbGxUb0NvbmZpcm1hdGlvbihwcm9wcywgd3JhcHBlclJlZik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IG9uU3VibWl0O1xuIl19