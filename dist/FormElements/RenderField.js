"use strict";function _typeof(a){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(a){return typeof a}:function(a){return a&&"function"==typeof Symbol&&a.constructor===Symbol&&a!==Symbol.prototype?"symbol":typeof a},_typeof(a)}Object.defineProperty(exports,"__esModule",{value:!0}),exports["default"]=void 0;var _react=_interopRequireWildcard(require("react")),FormFields=_interopRequireWildcard(require("../Fields"));function _getRequireWildcardCache(){if("function"!=typeof WeakMap)return null;var a=new WeakMap;return _getRequireWildcardCache=function(){return a},a}function _interopRequireWildcard(a){if(a&&a.__esModule)return a;if(null===a||"object"!==_typeof(a)&&"function"!=typeof a)return{default:a};var b=_getRequireWildcardCache();if(b&&b.has(a))return b.get(a);var c={},d=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var e in a)if(Object.prototype.hasOwnProperty.call(a,e)){var f=d?Object.getOwnPropertyDescriptor(a,e):null;f&&(f.get||f.set)?Object.defineProperty(c,e,f):c[e]=a[e]}return c["default"]=a,b&&b.set(a,c),c}function _slicedToArray(a,b){return _arrayWithHoles(a)||_iterableToArrayLimit(a,b)||_nonIterableRest()}function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}function _iterableToArrayLimit(a,b){if(Symbol.iterator in Object(a)||"[object Arguments]"===Object.prototype.toString.call(a)){var c=[],d=!0,e=!1,f=void 0;try{for(var g,h=a[Symbol.iterator]();!(d=(g=h.next()).done)&&(c.push(g.value),!(b&&c.length===b));d=!0);}catch(a){e=!0,f=a}finally{try{d||null==h["return"]||h["return"]()}finally{if(e)throw f}}return c}}function _arrayWithHoles(a){if(Array.isArray(a))return a}var frac2dec=function(a){var b=a.split("-");if(1===b.length&&(b=a.split(" ")),1<b.length&&-1!==a.indexOf("/")){var c=parseInt(b[0]),d=b[1].split("/"),e=parseInt(d[0])/parseInt(d[1]);return c+e}if(-1!==a.indexOf("/")){var f=a.split("/"),g=parseInt(f[0])/parseInt(f[1]);return g}return parseInt(a)},formatComponentName=function(a){return a.charAt(0).toUpperCase()+a.slice(1)},formatWidthFromCss=function(a){if(!a)return{};var b=a.indexOf("["),c=a.indexOf("]");if(-1===b||-1===c)return{};var d=a.substring(b+1,c).split(",").map(function(a){return frac2dec(a.replace(/\s/g,""))}),e="".concat(a.replace(a.substring(b,c+1),"")," custom-width");return{width:d,cleanedCssClass:e}},RenderField=function(a){var b=a.field,c=a.formValues,d=a.submitFailed,e=a.submitSuccess,f=a.setTouched,g=a.touched,h=a.updateForm,i=a.pages,j=a.prevStep,k=a.nextStep,l=a.isNextDisabled,m=a.saveStateToHtmlField,n=a.styledComponents,o=a.customComponents,p=a.error,q=a.unsetError,r=a.dropzoneText,s=FormFields[formatComponentName(b.type)],t=formatWidthFromCss(b.cssClass),u=t.cleanedCssClass,v=t.width;v&&(b.cssClass=u,b.width=v);var w=c[b.id]?c[b.id].value:b.defaultValue,x=(0,_react.useState)("".concat(b.cssClass).concat(w&&""!==w?"filled":"")),y=_slicedToArray(x,2),z=y[0],A=y[1];return _react["default"].createElement(s,{key:b.id,field:b,value:w,updateForm:function updateForm(a,b){return h(a,b)},validationMessage:!!c[b.id]&&c[b.id].valid,submitFailed:d,submitSuccess:e,touched:g[b.id],setTouched:f,unsetError:q,error:p,pages:i,prevStep:j,nextStep:k,isNextDisabled:l,hideField:!!c[b.id]&&c[b.id].hideField,saveStateToHtmlField:!("html"!==b.type||-1===b.cssClass.indexOf("set-state"))&&{formValues:c,saveStateToHtmlField:m},styledComponents:n,cssClass:z,setFocusClass:function setFocusClass(a){a?-1===z.indexOf(" filled")&&A("".concat(z," filled")):A(z.replace(" filled",""))},component:o&&o[b.id],dropzoneText:r})},_default=RenderField;exports["default"]=_default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,