"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireDefault(require("react"));

var FormFields = _interopRequireWildcard(require("../Fields"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj["default"] = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var frac2dec = function frac2dec(fraction) {
  /* assumes fraction is in the form  1-1/2 or 1 1/2 */

  /* doesn't work on negative numbers */
  var fractionParts = fraction.split("-");

  if (fractionParts.length === 1) {
    /* try space as divider */
    fractionParts = fraction.split(" ");
  }

  if (fractionParts.length > 1 && fraction.indexOf("/") !== -1) {
    var integer = parseInt(fractionParts[0]);
    var decimalParts = fractionParts[1].split("/");
    var decimal = parseInt(decimalParts[0]) / parseInt(decimalParts[1]);
    return integer + decimal;
  }

  if (fraction.indexOf("/") !== -1) {
    var _decimalParts = fraction.split("/");

    var _decimal = parseInt(_decimalParts[0]) / parseInt(_decimalParts[1]);

    return _decimal;
  }

  return parseInt(fraction);
};

var formatComponentName = function formatComponentName(string) {
  return string.charAt(0).toUpperCase() + string.slice(1);
};

var formatWidthFromCss = function formatWidthFromCss(cssClass) {
  if (!cssClass) return {};
  var widthStarts = cssClass.indexOf("[");
  var widthEnds = cssClass.indexOf("]");

  if (widthStarts === -1 || widthEnds === -1) {
    return {};
  }

  var width = cssClass.substring(widthStarts + 1, widthEnds).split(",").map(function (item) {
    return frac2dec(item.replace(/\s/g, ""));
  });
  var cleanedCssClass = cssClass.replace(cssClass.substring(widthStarts, widthEnds + 1), "");
  return {
    width: width,
    cleanedCssClass: cleanedCssClass
  };
};

var RenderField = function RenderField(_ref) {
  var field = _ref.field,
      formValues = _ref.formValues,
      submitFailed = _ref.submitFailed,
      submitSuccess = _ref.submitSuccess,
      setTouched = _ref.setTouched,
      touched = _ref.touched,
      _updateForm = _ref.updateForm,
      pages = _ref.pages,
      prevStep = _ref.prevStep,
      nextStep = _ref.nextStep,
      isNextDisabled = _ref.isNextDisabled,
      checkConditionalLogic = _ref.checkConditionalLogic,
      saveStateToHtmlField = _ref.saveStateToHtmlField,
      styledComponents = _ref.styledComponents;
  var FormComponent = FormFields[formatComponentName(field.type)];

  var _formatWidthFromCss = formatWidthFromCss(field.cssClass),
      cleanedCssClass = _formatWidthFromCss.cleanedCssClass,
      width = _formatWidthFromCss.width;

  if (width) {
    field.cssClass = cleanedCssClass;
    field.width = width;
  }

  return _react["default"].createElement(FormComponent, {
    key: field.id,
    field: field,
    value: formValues[field.id] ? formValues[field.id].value : field.defaultValue,
    updateForm: function updateForm(event, field) {
      return _updateForm(event, field);
    },
    validationMessage: formValues[field.id] ? formValues[field.id].valid : false,
    submitFailed: submitFailed,
    submitSuccess: submitSuccess,
    touched: touched[field.id],
    setTouched: setTouched,
    pages: pages,
    prevStep: prevStep,
    nextStep: nextStep,
    isNextDisabled: isNextDisabled,
    hideField: formValues[field.id] ? formValues[field.id].hideField : false,
    saveStateToHtmlField: field.type === "html" && field.cssClass.indexOf("set-state") !== -1 ? {
      formValues: formValues,
      saveStateToHtmlField: saveStateToHtmlField
    } : false,
    styledComponents: styledComponents
  });
};

var _default = RenderField;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,